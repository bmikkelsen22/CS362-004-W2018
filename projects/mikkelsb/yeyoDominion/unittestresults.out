Testing kingdomCards():
Comparing 1 to 1... TEST PASSED
Comparing 2 to 2... TEST PASSED
Comparing 3 to 3... TEST PASSED
Comparing 4 to 4... TEST PASSED
Comparing 5 to 5... TEST PASSED
Comparing 6 to 6... TEST PASSED
Comparing 7 to 7... TEST PASSED
Comparing 8 to 8... TEST PASSED
Comparing 9 to 9... TEST PASSED
Comparing 10 to 10... TEST PASSED
File 'dominion.c'
Lines executed:34.28% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:13
        -:    0:Programs:13
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    24415:    8:int compare(const void* a, const void* b) {
    24415:    9:  if (*(int*)a > *(int*)b)
     3041:   10:    return 1;
    21374:   11:  if (*(int*)a < *(int*)b)
     7866:   12:    return -1;
    13508:   13:  return 0;
        -:   14:}
        -:   15:
      307:   16:struct gameState* newGame() {
      307:   17:  struct gameState* g = malloc(sizeof(struct gameState));
      307:   18:  return g;
        -:   19:}
        -:   20:
      309:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
      309:   23:  int* k = malloc(10 * sizeof(int));
      309:   24:  k[0] = k1;
      309:   25:  k[1] = k2;
      309:   26:  k[2] = k3;
      309:   27:  k[3] = k4;
      309:   28:  k[4] = k5;
      309:   29:  k[5] = k6;
      309:   30:  k[6] = k7;
      309:   31:  k[7] = k8;
      309:   32:  k[8] = k9;
      309:   33:  k[9] = k10;
      309:   34:  return k;
        -:   35:}
        -:   36:
      307:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      307:   44:  SelectStream(1);
      307:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      307:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      307:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3377:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    33770:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    30700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      307:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      307:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      307:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      307:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      307:   95:      state->supplyCount[estate] = 12;
      307:   96:      state->supplyCount[duchy] = 12;
      307:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      307:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      307:  102:  state->supplyCount[silver] = 40;
      307:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     6447:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    64470:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    59558:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1228:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      614:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      307:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      921:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1228:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    58330:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1535:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1228:  140:      state->deckCount[i] = 0;
     4912:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3684:  143:	  state->deck[i][j] = estate;
     3684:  144:	  state->deckCount[i]++;
        -:  145:	}
     9824:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     8596:  148:	  state->deck[i][j] = copper;
     8596:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1535:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1228:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1535:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1228:  166:      state->handCount[i] = 0;
     1228:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     8596:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     8289:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      307:  182:  state->outpostPlayed = 0;
      307:  183:  state->phase = 0;
      307:  184:  state->numActions = 1;
      307:  185:  state->numBuys = 1;
      307:  186:  state->playedCardCount = 0;
      307:  187:  state->whoseTurn = 0;
      307:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1842:  192:  for (it = 0; it < 5; it++){
     1535:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      307:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      307:  198:  return 0;
        -:  199:}
        -:  200:
     1230:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1230:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1230:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1230:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15549:  214:  while (state->deckCount[player] > 0) {
    13089:  215:    card = floor(Random() * state->deckCount[player]);
    13089:  216:    newDeck[newDeckPos] = state->deck[player][card];
    13089:  217:    newDeckPos++;
   122653:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   109564:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    13089:  221:    state->deckCount[player]--;
        -:  222:  }
    14319:  223:  for (i = 0; i < newDeckPos; i++) {
    13089:  224:    state->deck[player][i] = newDeck[i];
    13089:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1230:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     2702:  320:int supplyCount(int card, struct gameState *state) {
     2702:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      304:  346:int whoseTurn(struct gameState *state) {
      304:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     4596:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     4596:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      811:  533:    for (i = 0; i < state->discardCount[player];i++){
      809:  534:      state->deck[player][i] = state->discard[player][i];
      809:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     4594:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     4594:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     4594:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     4594:  576:    state->deckCount[player]--;
     4594:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     4596:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      304:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      304:  653:  int currentPlayer = whoseTurn(state);
      304:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      304:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      304:  658:  int drawntreasure=0;
        -:  659:  //int cardDrawn;
      304:  660:  int z = 0;// this is the counter for the temp hand
      304:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
      304:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
      101:  670:      adventurerCardEffect(drawntreasure, temphand, z, currentPlayer, state);
      101:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
        1:  674:      council_roomCardEffect(currentPlayer, state, handPos);
        1:  675:      return 0;
        -:  676:			
        -:  677:    case feast:
    #####:  678:      feastCardEffect(choice1, temphand, currentPlayer, state, handPos);
    #####:  679:      return 0;
        -:  680:			
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
        -:  741:
        -:  742:
    #####:  743:      return 0;
        -:  744:		
        -:  745:    case smithy:
        -:  746:      //+3 Cards
      101:  747:      smithyCardEffect(currentPlayer,state,handPos);
      101:  748:      return 0;
        -:  749:		
        -:  750:    case village:
      101:  751:      villageCardEffect(currentPlayer,state,handPos);
      101:  752:      return 0;
        -:  753:		
        -:  754:    case baron:
    #####:  755:      state->numBuys++;//Increase buys by 1!
    #####:  756:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  757:	int p = 0;//Iterator for hand!
    #####:  758:	int card_not_discarded = 1;//Flag for discard set!
    #####:  759:	while(card_not_discarded){
    #####:  760:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  761:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  762:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  763:	    state->discardCount[currentPlayer]++;
    #####:  764:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  765:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  766:	    }
    #####:  767:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  768:	    state->handCount[currentPlayer]--;
    #####:  769:	    card_not_discarded = 0;//Exit the loop
        -:  770:	  }
    #####:  771:	  else if (p > state->handCount[currentPlayer]){
        -:  772:	    if(DEBUG) {
        -:  773:	      printf("No estate cards in your hand, invalid choice\n");
        -:  774:	      printf("Must gain an estate if there are any\n");
        -:  775:	    }
    #####:  776:	    if (supplyCount(estate, state) > 0){
    #####:  777:	      gainCard(estate, state, 0, currentPlayer);
    #####:  778:	      state->supplyCount[estate]--;//Decrement estates
    #####:  779:	      if (supplyCount(estate, state) == 0){
    #####:  780:		isGameOver(state);
        -:  781:	      }
        -:  782:	    }
    #####:  783:	    card_not_discarded = 0;//Exit the loop
        -:  784:	  }
        -:  785:			    
        -:  786:	  else{
    #####:  787:	    p++;//Next card
        -:  788:	  }
        -:  789:	}
        -:  790:      }
        -:  791:			    
        -:  792:      else{
    #####:  793:	if (supplyCount(estate, state) > 0){
    #####:  794:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  795:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  796:	  if (supplyCount(estate, state) == 0){
    #####:  797:	    isGameOver(state);
        -:  798:	  }
        -:  799:	}
        -:  800:      }
        -:  801:	    
        -:  802:      
    #####:  803:      return 0;
        -:  804:		
        -:  805:    case great_hall:
        -:  806:      //+1 Card
    #####:  807:      drawCard(currentPlayer, state);
        -:  808:			
        -:  809:      //+1 Actions
    #####:  810:      state->numActions++;
        -:  811:			
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
    #####:  814:      return 0;
        -:  815:		
        -:  816:    case minion:
        -:  817:      //+1 action
    #####:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
        -:  822:			
    #####:  823:      if (choice1)		//+2 coins
        -:  824:	{
    #####:  825:	  state->coins = state->coins + 2;
        -:  826:	}
        -:  827:			
    #####:  828:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  829:	{
        -:  830:	  //discard hand
    #####:  831:	  while(numHandCards(state) > 0)
        -:  832:	    {
    #####:  833:	      discardCard(handPos, currentPlayer, state, 0);
        -:  834:	    }
        -:  835:				
        -:  836:	  //draw 4
    #####:  837:	  for (i = 0; i < 4; i++)
        -:  838:	    {
    #####:  839:	      drawCard(currentPlayer, state);
        -:  840:	    }
        -:  841:				
        -:  842:	  //other players discard hand and redraw if hand size > 4
    #####:  843:	  for (i = 0; i < state->numPlayers; i++)
        -:  844:	    {
    #####:  845:	      if (i != currentPlayer)
        -:  846:		{
    #####:  847:		  if ( state->handCount[i] > 4 )
        -:  848:		    {
        -:  849:		      //discard hand
    #####:  850:		      while( state->handCount[i] > 0 )
        -:  851:			{
    #####:  852:			  discardCard(handPos, i, state, 0);
        -:  853:			}
        -:  854:							
        -:  855:		      //draw 4
    #####:  856:		      for (j = 0; j < 4; j++)
        -:  857:			{
    #####:  858:			  drawCard(i, state);
        -:  859:			}
        -:  860:		    }
        -:  861:		}
        -:  862:	    }
        -:  863:				
        -:  864:	}
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case steward:
    #####:  868:      if (choice1 == 1)
        -:  869:	{
        -:  870:	  //+2 cards
    #####:  871:	  drawCard(currentPlayer, state);
    #####:  872:	  drawCard(currentPlayer, state);
        -:  873:	}
    #####:  874:      else if (choice1 == 2)
        -:  875:	{
        -:  876:	  //+2 coins
    #####:  877:	  state->coins = state->coins + 2;
        -:  878:	}
        -:  879:      else
        -:  880:	{
        -:  881:	  //trash 2 cards in hand
    #####:  882:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  883:	  discardCard(choice3, currentPlayer, state, 1);
        -:  884:	}
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case tribute:
    #####:  891:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  892:	if (state->deckCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	  state->deckCount[nextPlayer]--;
        -:  895:	}
    #####:  896:	else if (state->discardCount[nextPlayer] > 0){
    #####:  897:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  898:	  state->discardCount[nextPlayer]--;
        -:  899:	}
        -:  900:	else{
        -:  901:	  //No Card to Reveal
        -:  902:	  if (DEBUG){
        -:  903:	    printf("No cards to reveal\n");
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:	    
        -:  908:      else{
    #####:  909:	if (state->deckCount[nextPlayer] == 0){
    #####:  910:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  911:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  912:	    state->deckCount[nextPlayer]++;
    #####:  913:	    state->discard[nextPlayer][i] = -1;
    #####:  914:	    state->discardCount[nextPlayer]--;
        -:  915:	  }
        -:  916:			    
    #####:  917:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  918:	} 
    #####:  919:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
    #####:  922:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
        -:  925:      }    
        -:  926:		       
    #####:  927:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  928:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  929:	state->playedCardCount++;
    #####:  930:	tributeRevealedCards[1] = -1;
        -:  931:      }
        -:  932:
    #####:  933:      for (i = 0; i <= 2; i ++){
    #####:  934:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  935:	  state->coins += 2;
        -:  936:	}
        -:  937:		    
    #####:  938:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  939:	  drawCard(currentPlayer, state);
    #####:  940:	  drawCard(currentPlayer, state);
        -:  941:	}
        -:  942:	else{//Action Card
    #####:  943:	  state->numActions = state->numActions + 2;
        -:  944:	}
        -:  945:      }
        -:  946:	    
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case ambassador:
    #####:  950:      j = 0;		//used to check if player has enough cards to discard
        -:  951:
    #####:  952:      if (choice2 > 2 || choice2 < 0)
        -:  953:	{
    #####:  954:	  return -1;				
        -:  955:	}
        -:  956:
    #####:  957:      if (choice1 == handPos)
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  963:	{
    #####:  964:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  965:	    {
    #####:  966:	      j++;
        -:  967:	    }
        -:  968:	}
    #####:  969:      if (j < choice2)
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
        -:  974:      if (DEBUG) 
        -:  975:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  976:
        -:  977:      //increase supply count for choosen card by amount being discarded
    #####:  978:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  979:			
        -:  980:      //each other player gains a copy of revealed card
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
        -:  984:	    {
    #####:  985:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  986:	    }
        -:  987:	}
        -:  988:
        -:  989:      //discard played card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);			
        -:  991:
        -:  992:      //trash copies of cards returned to supply
    #####:  993:      for (j = 0; j < choice2; j++)
        -:  994:	{
    #####:  995:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:	    {
    #####:  997:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  998:		{
    #####:  999:		  discardCard(i, currentPlayer, state, 1);
    #####: 1000:		  break;
        -: 1001:		}
        -: 1002:	    }
        -: 1003:	}			
        -: 1004:
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case cutpurse:
        -: 1008:
    #####: 1009:      updateCoins(currentPlayer, state, 2);
    #####: 1010:      for (i = 0; i < state->numPlayers; i++)
        -: 1011:	{
    #####: 1012:	  if (i != currentPlayer)
        -: 1013:	    {
    #####: 1014:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1015:		{
    #####: 1016:		  if (state->hand[i][j] == copper)
        -: 1017:		    {
    #####: 1018:		      discardCard(j, i, state, 0);
    #####: 1019:		      break;
        -: 1020:		    }
    #####: 1021:		  if (j == state->handCount[i])
        -: 1022:		    {
    #####: 1023:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1024:			{
        -: 1025:			  if (DEBUG)
        -: 1026:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1027:			}	
    #####: 1028:		      break;
        -: 1029:		    }		
        -: 1030:		}
        -: 1031:					
        -: 1032:	    }
        -: 1033:				
        -: 1034:	}				
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1038:
    #####: 1039:      return 0;
        -: 1040:
        -: 1041:		
        -: 1042:    case embargo: 
        -: 1043:      //+2 Coins
    #####: 1044:      state->coins = state->coins + 2;
        -: 1045:			
        -: 1046:      //see if selected pile is in play
    #####: 1047:      if ( state->supplyCount[choice1] == -1 )
        -: 1048:	{
    #####: 1049:	  return -1;
        -: 1050:	}
        -: 1051:			
        -: 1052:      //add embargo token to selected supply pile
    #####: 1053:      state->embargoTokens[choice1]++;
        -: 1054:			
        -: 1055:      //trash card
    #####: 1056:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case outpost:
        -: 1060:      //set outpost flag
    #####: 1061:      state->outpostPlayed++;
        -: 1062:			
        -: 1063:      //discard card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case salvager:
        -: 1068:      //+1 buy
    #####: 1069:      state->numBuys++;
        -: 1070:			
    #####: 1071:      if (choice1)
        -: 1072:	{
        -: 1073:	  //gain coins equal to trashed card
    #####: 1074:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1075:	  //trash card
    #####: 1076:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1077:	}
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case sea_hag:
    #####: 1084:      for (i = 0; i < state->numPlayers; i++){
    #####: 1085:	if (i != currentPlayer){
    #####: 1086:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1087:	  state->discardCount[i]++;
    #####: 1088:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1089:	}
        -: 1090:      }
    #####: 1091:      return 0;
        -: 1092:		
        -: 1093:    case treasure_map:
        -: 1094:      //search hand for another treasure_map
    #####: 1095:      index = -1;
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	{
    #####: 1098:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1099:	    {
    #####: 1100:	      index = i;
    #####: 1101:	      break;
        -: 1102:	    }
        -: 1103:	}
    #####: 1104:      if (index > -1)
        -: 1105:	{
        -: 1106:	  //trash both treasure cards
    #####: 1107:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1108:	  discardCard(index, currentPlayer, state, 1);
        -: 1109:
        -: 1110:	  //gain 4 Gold cards
    #####: 1111:	  for (i = 0; i < 4; i++)
        -: 1112:	    {
    #####: 1113:	      gainCard(gold, state, 1, currentPlayer);
        -: 1114:	    }
        -: 1115:				
        -: 1116:	  //return success
    #####: 1117:	  return 1;
        -: 1118:	}
        -: 1119:			
        -: 1120:      //no second treasure_map found in hand
    #####: 1121:      return -1;
        -: 1122:    }
        -: 1123:	
    #####: 1124:  return -1;
        -: 1125:}
        -: 1126:
      204: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1128:{
        -: 1129:	
        -: 1130:  //if card is not trashed, added to Played pile 
      204: 1131:  if (trashFlag < 1)
        -: 1132:    {
        -: 1133:      //add card to played pile
      203: 1134:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      203: 1135:      state->playedCardCount++;
        -: 1136:    }
        -: 1137:	
        -: 1138:  //set played card to -1
      204: 1139:  state->hand[currentPlayer][handPos] = -1;
        -: 1140:	
        -: 1141:  //remove card from player's hand
      204: 1142:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
       11: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
      193: 1147:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
    #####: 1150:      state->handCount[currentPlayer]--;
        -: 1151:    }
        -: 1152:  else 	
        -: 1153:    {
        -: 1154:      //replace discarded card with last card in hand
      193: 1155:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:      //set last card to -1
      193: 1157:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:      //reduce number of cards in hand
      193: 1159:      state->handCount[currentPlayer]--;
        -: 1160:    }
        -: 1161:	
      204: 1162:  return 0;
        -: 1163:}
        -: 1164:
     2702: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1166:{
        -: 1167:  //Note: supplyPos is enum of choosen card
        -: 1168:	
        -: 1169:  //check if supply pile is empty (0) or card is not used in game (-1)
     2702: 1170:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1171:    {
        2: 1172:      return -1;
        -: 1173:    }
        -: 1174:	
        -: 1175:  //added card for [whoseTurn] current player:
        -: 1176:  // toFlag = 0 : add to discard
        -: 1177:  // toFlag = 1 : add to deck
        -: 1178:  // toFlag = 2 : add to hand
        -: 1179:
     2700: 1180:  if (toFlag == 1)
        -: 1181:    {
     2700: 1182:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     2700: 1183:      state->deckCount[player]++;
        -: 1184:    }
    #####: 1185:  else if (toFlag == 2)
        -: 1186:    {
    #####: 1187:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1188:      state->handCount[player]++;
        -: 1189:    }
        -: 1190:  else
        -: 1191:    {
    #####: 1192:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1193:      state->discardCount[player]++;
        -: 1194:    }
        -: 1195:	
        -: 1196:  //decrease number in supply pile
     2700: 1197:  state->supplyCount[supplyPos]--;
        -: 1198:	 
     2700: 1199:  return 0;
        -: 1200:}
        -: 1201:
      310: 1202:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1203:{
        -: 1204:  int i;
        -: 1205:	
        -: 1206:  //reset coin count
      310: 1207:  state->coins = 0;
        -: 1208:
        -: 1209:  //add coins for each Treasure card in player's hand
     1850: 1210:  for (i = 0; i < state->handCount[player]; i++)
        -: 1211:    {
     1540: 1212:      if (state->hand[player][i] == copper)
        -: 1213:	{
     1217: 1214:	  state->coins += 1;
        -: 1215:	}
      323: 1216:      else if (state->hand[player][i] == silver)
        -: 1217:	{
    #####: 1218:	  state->coins += 2;
        -: 1219:	}
      323: 1220:      else if (state->hand[player][i] == gold)
        -: 1221:	{
    #####: 1222:	  state->coins += 3;
        -: 1223:	}	
        -: 1224:    }	
        -: 1225:
        -: 1226:  //add bonus
      310: 1227:  state->coins += bonus;
        -: 1228:
      310: 1229:  return 0;
        -: 1230:}
        -: 1231:
      101: 1232:void adventurerCardEffect(int drawntreasure, int temphand[], int z, int currentPlayer, struct gameState *state){
      852: 1233:  while(drawntreasure<2){
      650: 1234:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1235:      shuffle(currentPlayer, state);
        -: 1236:    }
      650: 1237:    drawCard(currentPlayer, state);
      650: 1238:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      650: 1239:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      202: 1240:      drawntreasure++;
        -: 1241:    else{
      448: 1242:      temphand[z]=cardDrawn;
      448: 1243:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      448: 1244:      z++;
        -: 1245:    }
        -: 1246:  }
      650: 1247:  while(z-1>=0){
      448: 1248:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      448: 1249:    z=z-1;
        -: 1250:  }
      101: 1251:}
        -: 1252:
    #####: 1253:void feastCardEffect(int choice1, int temphand[], int currentPlayer, struct gameState *state, int handPos){
        -: 1254:  int i;
    #####: 1255:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1256:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1257:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1258:  }
        -: 1259:  //Backup hand
        -: 1260:  
        -: 1261:  //Update Coins for Buy
    #####: 1262:  updateCoins(currentPlayer, state, 5);
    #####: 1263:  int x = 1;//Condition to loop on
    #####: 1264:  while( x == 1) {//Buy one card
    #####: 1265:    if (supplyCount(choice1, state) <= 0){
        -: 1266:      if (DEBUG)
        -: 1267:        printf("None of that card left, sorry!\n");
        -: 1268:
        -: 1269:      if (DEBUG)
        -: 1270:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1271:    }
    #####: 1272:    else if (state->coins < getCost(choice1)){
    #####: 1273:      printf("That card is too expensive!\n");
        -: 1274:
        -: 1275:      if (DEBUG){
        -: 1276:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1277:      }
        -: 1278:    }
        -: 1279:    else{
        -: 1280:
        -: 1281:      if (DEBUG){
        -: 1282:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1283:      }
        -: 1284:
    #####: 1285:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1286:      x = 0;//No more buying cards
        -: 1287:
        -: 1288:      if (DEBUG){
        -: 1289:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1290:      }
        -: 1291:
        -: 1292:    }
        -: 1293:  }     
        -: 1294:
        -: 1295:  //Reset Hand
    #####: 1296:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1297:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1298:    temphand[i] = -1;
        -: 1299:  }
    #####: 1300:} 
        -: 1301:
        -: 1302:
        1: 1303:void council_roomCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1304:  int i;
        -: 1305:  //+4 Cards
        5: 1306:  for (i = 0; i < 4; i++){
        4: 1307:    drawCard(currentPlayer, state);
        -: 1308:  }
        -: 1309:      
        -: 1310:  //+1 Buy
        1: 1311:  state->numBuys++;
        -: 1312:      
        -: 1313:  //Each other player draws a card
        5: 1314:  for (i = 0; i < state->numPlayers; i++){
        4: 1315:    if ( i != currentPlayer )
        -: 1316:    {
        3: 1317:      drawCard(i, state);
        -: 1318:    }
        -: 1319:  }
        -: 1320:      
        -: 1321:  //put played card in played card pile
        1: 1322:  discardCard(handPos, currentPlayer, state, 0);
        1: 1323:}
        -: 1324:
      101: 1325:void smithyCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1326:  int i;
      404: 1327:  for (i = 0; i < 3; i++)
        -: 1328:  {
      303: 1329:    drawCard(currentPlayer, state);
        -: 1330:  }
        -: 1331:      
        -: 1332:  //discard card from hand
      101: 1333:  discardCard(handPos, currentPlayer, state, 0);
      101: 1334:}
        -: 1335:
      101: 1336:void villageCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1337:  //+1 Card
      101: 1338:  drawCard(currentPlayer, state);
        -: 1339:      
        -: 1340:  //+2 Actions
      101: 1341:  state->numActions = state->numActions + 2;
        -: 1342:      
        -: 1343:  //discard played card from hand
      101: 1344:  discardCard(handPos, currentPlayer, state, 0);
      101: 1345:}
        -: 1346:
        -: 1347://end of dominion.c
        -: 1348:
Testing updateCoins:
Comparing 11 to 11... TEST PASSED
Comparing 2 to 2... TEST PASSED
Comparing 0 to 0... TEST PASSED
File 'dominion.c'
Lines executed:34.28% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:14
        -:    0:Programs:14
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    24475:    8:int compare(const void* a, const void* b) {
    24475:    9:  if (*(int*)a > *(int*)b)
     3041:   10:    return 1;
    21434:   11:  if (*(int*)a < *(int*)b)
     7882:   12:    return -1;
    13552:   13:  return 0;
        -:   14:}
        -:   15:
      308:   16:struct gameState* newGame() {
      308:   17:  struct gameState* g = malloc(sizeof(struct gameState));
      308:   18:  return g;
        -:   19:}
        -:   20:
      310:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
      310:   23:  int* k = malloc(10 * sizeof(int));
      310:   24:  k[0] = k1;
      310:   25:  k[1] = k2;
      310:   26:  k[2] = k3;
      310:   27:  k[3] = k4;
      310:   28:  k[4] = k5;
      310:   29:  k[5] = k6;
      310:   30:  k[6] = k7;
      310:   31:  k[7] = k8;
      310:   32:  k[8] = k9;
      310:   33:  k[9] = k10;
      310:   34:  return k;
        -:   35:}
        -:   36:
      308:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      308:   44:  SelectStream(1);
      308:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      308:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      308:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3388:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    33880:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    30800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      308:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      308:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      308:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      308:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      308:   95:      state->supplyCount[estate] = 12;
      308:   96:      state->supplyCount[duchy] = 12;
      308:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      308:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      308:  102:  state->supplyCount[silver] = 40;
      308:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     6468:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    64680:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    59752:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1232:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      616:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      308:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      924:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1232:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    58520:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1540:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1232:  140:      state->deckCount[i] = 0;
     4928:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3696:  143:	  state->deck[i][j] = estate;
     3696:  144:	  state->deckCount[i]++;
        -:  145:	}
     9856:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     8624:  148:	  state->deck[i][j] = copper;
     8624:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1540:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1232:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1540:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1232:  166:      state->handCount[i] = 0;
     1232:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     8624:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     8316:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      308:  182:  state->outpostPlayed = 0;
      308:  183:  state->phase = 0;
      308:  184:  state->numActions = 1;
      308:  185:  state->numBuys = 1;
      308:  186:  state->playedCardCount = 0;
      308:  187:  state->whoseTurn = 0;
      308:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1848:  192:  for (it = 0; it < 5; it++){
     1540:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      308:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      308:  198:  return 0;
        -:  199:}
        -:  200:
     1234:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1234:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1234:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1234:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15597:  214:  while (state->deckCount[player] > 0) {
    13129:  215:    card = floor(Random() * state->deckCount[player]);
    13129:  216:    newDeck[newDeckPos] = state->deck[player][card];
    13129:  217:    newDeckPos++;
   122784:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   109655:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    13129:  221:    state->deckCount[player]--;
        -:  222:  }
    14363:  223:  for (i = 0; i < newDeckPos; i++) {
    13129:  224:    state->deck[player][i] = newDeck[i];
    13129:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1234:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     2702:  320:int supplyCount(int card, struct gameState *state) {
     2702:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      304:  346:int whoseTurn(struct gameState *state) {
      304:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     4601:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     4601:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      811:  533:    for (i = 0; i < state->discardCount[player];i++){
      809:  534:      state->deck[player][i] = state->discard[player][i];
      809:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     4599:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     4599:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     4599:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     4599:  576:    state->deckCount[player]--;
     4599:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     4601:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      304:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      304:  653:  int currentPlayer = whoseTurn(state);
      304:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      304:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      304:  658:  int drawntreasure=0;
        -:  659:  //int cardDrawn;
      304:  660:  int z = 0;// this is the counter for the temp hand
      304:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
      304:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
      101:  670:      adventurerCardEffect(drawntreasure, temphand, z, currentPlayer, state);
      101:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
        1:  674:      council_roomCardEffect(currentPlayer, state, handPos);
        1:  675:      return 0;
        -:  676:			
        -:  677:    case feast:
    #####:  678:      feastCardEffect(choice1, temphand, currentPlayer, state, handPos);
    #####:  679:      return 0;
        -:  680:			
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
        -:  741:
        -:  742:
    #####:  743:      return 0;
        -:  744:		
        -:  745:    case smithy:
        -:  746:      //+3 Cards
      101:  747:      smithyCardEffect(currentPlayer,state,handPos);
      101:  748:      return 0;
        -:  749:		
        -:  750:    case village:
      101:  751:      villageCardEffect(currentPlayer,state,handPos);
      101:  752:      return 0;
        -:  753:		
        -:  754:    case baron:
    #####:  755:      state->numBuys++;//Increase buys by 1!
    #####:  756:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  757:	int p = 0;//Iterator for hand!
    #####:  758:	int card_not_discarded = 1;//Flag for discard set!
    #####:  759:	while(card_not_discarded){
    #####:  760:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  761:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  762:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  763:	    state->discardCount[currentPlayer]++;
    #####:  764:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  765:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  766:	    }
    #####:  767:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  768:	    state->handCount[currentPlayer]--;
    #####:  769:	    card_not_discarded = 0;//Exit the loop
        -:  770:	  }
    #####:  771:	  else if (p > state->handCount[currentPlayer]){
        -:  772:	    if(DEBUG) {
        -:  773:	      printf("No estate cards in your hand, invalid choice\n");
        -:  774:	      printf("Must gain an estate if there are any\n");
        -:  775:	    }
    #####:  776:	    if (supplyCount(estate, state) > 0){
    #####:  777:	      gainCard(estate, state, 0, currentPlayer);
    #####:  778:	      state->supplyCount[estate]--;//Decrement estates
    #####:  779:	      if (supplyCount(estate, state) == 0){
    #####:  780:		isGameOver(state);
        -:  781:	      }
        -:  782:	    }
    #####:  783:	    card_not_discarded = 0;//Exit the loop
        -:  784:	  }
        -:  785:			    
        -:  786:	  else{
    #####:  787:	    p++;//Next card
        -:  788:	  }
        -:  789:	}
        -:  790:      }
        -:  791:			    
        -:  792:      else{
    #####:  793:	if (supplyCount(estate, state) > 0){
    #####:  794:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  795:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  796:	  if (supplyCount(estate, state) == 0){
    #####:  797:	    isGameOver(state);
        -:  798:	  }
        -:  799:	}
        -:  800:      }
        -:  801:	    
        -:  802:      
    #####:  803:      return 0;
        -:  804:		
        -:  805:    case great_hall:
        -:  806:      //+1 Card
    #####:  807:      drawCard(currentPlayer, state);
        -:  808:			
        -:  809:      //+1 Actions
    #####:  810:      state->numActions++;
        -:  811:			
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
    #####:  814:      return 0;
        -:  815:		
        -:  816:    case minion:
        -:  817:      //+1 action
    #####:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
        -:  822:			
    #####:  823:      if (choice1)		//+2 coins
        -:  824:	{
    #####:  825:	  state->coins = state->coins + 2;
        -:  826:	}
        -:  827:			
    #####:  828:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  829:	{
        -:  830:	  //discard hand
    #####:  831:	  while(numHandCards(state) > 0)
        -:  832:	    {
    #####:  833:	      discardCard(handPos, currentPlayer, state, 0);
        -:  834:	    }
        -:  835:				
        -:  836:	  //draw 4
    #####:  837:	  for (i = 0; i < 4; i++)
        -:  838:	    {
    #####:  839:	      drawCard(currentPlayer, state);
        -:  840:	    }
        -:  841:				
        -:  842:	  //other players discard hand and redraw if hand size > 4
    #####:  843:	  for (i = 0; i < state->numPlayers; i++)
        -:  844:	    {
    #####:  845:	      if (i != currentPlayer)
        -:  846:		{
    #####:  847:		  if ( state->handCount[i] > 4 )
        -:  848:		    {
        -:  849:		      //discard hand
    #####:  850:		      while( state->handCount[i] > 0 )
        -:  851:			{
    #####:  852:			  discardCard(handPos, i, state, 0);
        -:  853:			}
        -:  854:							
        -:  855:		      //draw 4
    #####:  856:		      for (j = 0; j < 4; j++)
        -:  857:			{
    #####:  858:			  drawCard(i, state);
        -:  859:			}
        -:  860:		    }
        -:  861:		}
        -:  862:	    }
        -:  863:				
        -:  864:	}
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case steward:
    #####:  868:      if (choice1 == 1)
        -:  869:	{
        -:  870:	  //+2 cards
    #####:  871:	  drawCard(currentPlayer, state);
    #####:  872:	  drawCard(currentPlayer, state);
        -:  873:	}
    #####:  874:      else if (choice1 == 2)
        -:  875:	{
        -:  876:	  //+2 coins
    #####:  877:	  state->coins = state->coins + 2;
        -:  878:	}
        -:  879:      else
        -:  880:	{
        -:  881:	  //trash 2 cards in hand
    #####:  882:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  883:	  discardCard(choice3, currentPlayer, state, 1);
        -:  884:	}
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case tribute:
    #####:  891:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  892:	if (state->deckCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	  state->deckCount[nextPlayer]--;
        -:  895:	}
    #####:  896:	else if (state->discardCount[nextPlayer] > 0){
    #####:  897:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  898:	  state->discardCount[nextPlayer]--;
        -:  899:	}
        -:  900:	else{
        -:  901:	  //No Card to Reveal
        -:  902:	  if (DEBUG){
        -:  903:	    printf("No cards to reveal\n");
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:	    
        -:  908:      else{
    #####:  909:	if (state->deckCount[nextPlayer] == 0){
    #####:  910:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  911:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  912:	    state->deckCount[nextPlayer]++;
    #####:  913:	    state->discard[nextPlayer][i] = -1;
    #####:  914:	    state->discardCount[nextPlayer]--;
        -:  915:	  }
        -:  916:			    
    #####:  917:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  918:	} 
    #####:  919:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
    #####:  922:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
        -:  925:      }    
        -:  926:		       
    #####:  927:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  928:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  929:	state->playedCardCount++;
    #####:  930:	tributeRevealedCards[1] = -1;
        -:  931:      }
        -:  932:
    #####:  933:      for (i = 0; i <= 2; i ++){
    #####:  934:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  935:	  state->coins += 2;
        -:  936:	}
        -:  937:		    
    #####:  938:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  939:	  drawCard(currentPlayer, state);
    #####:  940:	  drawCard(currentPlayer, state);
        -:  941:	}
        -:  942:	else{//Action Card
    #####:  943:	  state->numActions = state->numActions + 2;
        -:  944:	}
        -:  945:      }
        -:  946:	    
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case ambassador:
    #####:  950:      j = 0;		//used to check if player has enough cards to discard
        -:  951:
    #####:  952:      if (choice2 > 2 || choice2 < 0)
        -:  953:	{
    #####:  954:	  return -1;				
        -:  955:	}
        -:  956:
    #####:  957:      if (choice1 == handPos)
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  963:	{
    #####:  964:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  965:	    {
    #####:  966:	      j++;
        -:  967:	    }
        -:  968:	}
    #####:  969:      if (j < choice2)
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
        -:  974:      if (DEBUG) 
        -:  975:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  976:
        -:  977:      //increase supply count for choosen card by amount being discarded
    #####:  978:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  979:			
        -:  980:      //each other player gains a copy of revealed card
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
        -:  984:	    {
    #####:  985:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  986:	    }
        -:  987:	}
        -:  988:
        -:  989:      //discard played card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);			
        -:  991:
        -:  992:      //trash copies of cards returned to supply
    #####:  993:      for (j = 0; j < choice2; j++)
        -:  994:	{
    #####:  995:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:	    {
    #####:  997:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  998:		{
    #####:  999:		  discardCard(i, currentPlayer, state, 1);
    #####: 1000:		  break;
        -: 1001:		}
        -: 1002:	    }
        -: 1003:	}			
        -: 1004:
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case cutpurse:
        -: 1008:
    #####: 1009:      updateCoins(currentPlayer, state, 2);
    #####: 1010:      for (i = 0; i < state->numPlayers; i++)
        -: 1011:	{
    #####: 1012:	  if (i != currentPlayer)
        -: 1013:	    {
    #####: 1014:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1015:		{
    #####: 1016:		  if (state->hand[i][j] == copper)
        -: 1017:		    {
    #####: 1018:		      discardCard(j, i, state, 0);
    #####: 1019:		      break;
        -: 1020:		    }
    #####: 1021:		  if (j == state->handCount[i])
        -: 1022:		    {
    #####: 1023:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1024:			{
        -: 1025:			  if (DEBUG)
        -: 1026:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1027:			}	
    #####: 1028:		      break;
        -: 1029:		    }		
        -: 1030:		}
        -: 1031:					
        -: 1032:	    }
        -: 1033:				
        -: 1034:	}				
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1038:
    #####: 1039:      return 0;
        -: 1040:
        -: 1041:		
        -: 1042:    case embargo: 
        -: 1043:      //+2 Coins
    #####: 1044:      state->coins = state->coins + 2;
        -: 1045:			
        -: 1046:      //see if selected pile is in play
    #####: 1047:      if ( state->supplyCount[choice1] == -1 )
        -: 1048:	{
    #####: 1049:	  return -1;
        -: 1050:	}
        -: 1051:			
        -: 1052:      //add embargo token to selected supply pile
    #####: 1053:      state->embargoTokens[choice1]++;
        -: 1054:			
        -: 1055:      //trash card
    #####: 1056:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case outpost:
        -: 1060:      //set outpost flag
    #####: 1061:      state->outpostPlayed++;
        -: 1062:			
        -: 1063:      //discard card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case salvager:
        -: 1068:      //+1 buy
    #####: 1069:      state->numBuys++;
        -: 1070:			
    #####: 1071:      if (choice1)
        -: 1072:	{
        -: 1073:	  //gain coins equal to trashed card
    #####: 1074:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1075:	  //trash card
    #####: 1076:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1077:	}
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case sea_hag:
    #####: 1084:      for (i = 0; i < state->numPlayers; i++){
    #####: 1085:	if (i != currentPlayer){
    #####: 1086:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1087:	  state->discardCount[i]++;
    #####: 1088:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1089:	}
        -: 1090:      }
    #####: 1091:      return 0;
        -: 1092:		
        -: 1093:    case treasure_map:
        -: 1094:      //search hand for another treasure_map
    #####: 1095:      index = -1;
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	{
    #####: 1098:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1099:	    {
    #####: 1100:	      index = i;
    #####: 1101:	      break;
        -: 1102:	    }
        -: 1103:	}
    #####: 1104:      if (index > -1)
        -: 1105:	{
        -: 1106:	  //trash both treasure cards
    #####: 1107:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1108:	  discardCard(index, currentPlayer, state, 1);
        -: 1109:
        -: 1110:	  //gain 4 Gold cards
    #####: 1111:	  for (i = 0; i < 4; i++)
        -: 1112:	    {
    #####: 1113:	      gainCard(gold, state, 1, currentPlayer);
        -: 1114:	    }
        -: 1115:				
        -: 1116:	  //return success
    #####: 1117:	  return 1;
        -: 1118:	}
        -: 1119:			
        -: 1120:      //no second treasure_map found in hand
    #####: 1121:      return -1;
        -: 1122:    }
        -: 1123:	
    #####: 1124:  return -1;
        -: 1125:}
        -: 1126:
      204: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1128:{
        -: 1129:	
        -: 1130:  //if card is not trashed, added to Played pile 
      204: 1131:  if (trashFlag < 1)
        -: 1132:    {
        -: 1133:      //add card to played pile
      203: 1134:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      203: 1135:      state->playedCardCount++;
        -: 1136:    }
        -: 1137:	
        -: 1138:  //set played card to -1
      204: 1139:  state->hand[currentPlayer][handPos] = -1;
        -: 1140:	
        -: 1141:  //remove card from player's hand
      204: 1142:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
       11: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
      193: 1147:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
    #####: 1150:      state->handCount[currentPlayer]--;
        -: 1151:    }
        -: 1152:  else 	
        -: 1153:    {
        -: 1154:      //replace discarded card with last card in hand
      193: 1155:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:      //set last card to -1
      193: 1157:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:      //reduce number of cards in hand
      193: 1159:      state->handCount[currentPlayer]--;
        -: 1160:    }
        -: 1161:	
      204: 1162:  return 0;
        -: 1163:}
        -: 1164:
     2702: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1166:{
        -: 1167:  //Note: supplyPos is enum of choosen card
        -: 1168:	
        -: 1169:  //check if supply pile is empty (0) or card is not used in game (-1)
     2702: 1170:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1171:    {
        2: 1172:      return -1;
        -: 1173:    }
        -: 1174:	
        -: 1175:  //added card for [whoseTurn] current player:
        -: 1176:  // toFlag = 0 : add to discard
        -: 1177:  // toFlag = 1 : add to deck
        -: 1178:  // toFlag = 2 : add to hand
        -: 1179:
     2700: 1180:  if (toFlag == 1)
        -: 1181:    {
     2700: 1182:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     2700: 1183:      state->deckCount[player]++;
        -: 1184:    }
    #####: 1185:  else if (toFlag == 2)
        -: 1186:    {
    #####: 1187:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1188:      state->handCount[player]++;
        -: 1189:    }
        -: 1190:  else
        -: 1191:    {
    #####: 1192:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1193:      state->discardCount[player]++;
        -: 1194:    }
        -: 1195:	
        -: 1196:  //decrease number in supply pile
     2700: 1197:  state->supplyCount[supplyPos]--;
        -: 1198:	 
     2700: 1199:  return 0;
        -: 1200:}
        -: 1201:
      314: 1202:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1203:{
        -: 1204:  int i;
        -: 1205:	
        -: 1206:  //reset coin count
      314: 1207:  state->coins = 0;
        -: 1208:
        -: 1209:  //add coins for each Treasure card in player's hand
     1864: 1210:  for (i = 0; i < state->handCount[player]; i++)
        -: 1211:    {
     1550: 1212:      if (state->hand[player][i] == copper)
        -: 1213:	{
     1225: 1214:	  state->coins += 1;
        -: 1215:	}
      325: 1216:      else if (state->hand[player][i] == silver)
        -: 1217:	{
    #####: 1218:	  state->coins += 2;
        -: 1219:	}
      325: 1220:      else if (state->hand[player][i] == gold)
        -: 1221:	{
    #####: 1222:	  state->coins += 3;
        -: 1223:	}	
        -: 1224:    }	
        -: 1225:
        -: 1226:  //add bonus
      314: 1227:  state->coins += bonus;
        -: 1228:
      314: 1229:  return 0;
        -: 1230:}
        -: 1231:
      101: 1232:void adventurerCardEffect(int drawntreasure, int temphand[], int z, int currentPlayer, struct gameState *state){
      852: 1233:  while(drawntreasure<2){
      650: 1234:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1235:      shuffle(currentPlayer, state);
        -: 1236:    }
      650: 1237:    drawCard(currentPlayer, state);
      650: 1238:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      650: 1239:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      202: 1240:      drawntreasure++;
        -: 1241:    else{
      448: 1242:      temphand[z]=cardDrawn;
      448: 1243:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      448: 1244:      z++;
        -: 1245:    }
        -: 1246:  }
      650: 1247:  while(z-1>=0){
      448: 1248:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      448: 1249:    z=z-1;
        -: 1250:  }
      101: 1251:}
        -: 1252:
    #####: 1253:void feastCardEffect(int choice1, int temphand[], int currentPlayer, struct gameState *state, int handPos){
        -: 1254:  int i;
    #####: 1255:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1256:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1257:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1258:  }
        -: 1259:  //Backup hand
        -: 1260:  
        -: 1261:  //Update Coins for Buy
    #####: 1262:  updateCoins(currentPlayer, state, 5);
    #####: 1263:  int x = 1;//Condition to loop on
    #####: 1264:  while( x == 1) {//Buy one card
    #####: 1265:    if (supplyCount(choice1, state) <= 0){
        -: 1266:      if (DEBUG)
        -: 1267:        printf("None of that card left, sorry!\n");
        -: 1268:
        -: 1269:      if (DEBUG)
        -: 1270:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1271:    }
    #####: 1272:    else if (state->coins < getCost(choice1)){
    #####: 1273:      printf("That card is too expensive!\n");
        -: 1274:
        -: 1275:      if (DEBUG){
        -: 1276:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1277:      }
        -: 1278:    }
        -: 1279:    else{
        -: 1280:
        -: 1281:      if (DEBUG){
        -: 1282:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1283:      }
        -: 1284:
    #####: 1285:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1286:      x = 0;//No more buying cards
        -: 1287:
        -: 1288:      if (DEBUG){
        -: 1289:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1290:      }
        -: 1291:
        -: 1292:    }
        -: 1293:  }     
        -: 1294:
        -: 1295:  //Reset Hand
    #####: 1296:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1297:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1298:    temphand[i] = -1;
        -: 1299:  }
    #####: 1300:} 
        -: 1301:
        -: 1302:
        1: 1303:void council_roomCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1304:  int i;
        -: 1305:  //+4 Cards
        5: 1306:  for (i = 0; i < 4; i++){
        4: 1307:    drawCard(currentPlayer, state);
        -: 1308:  }
        -: 1309:      
        -: 1310:  //+1 Buy
        1: 1311:  state->numBuys++;
        -: 1312:      
        -: 1313:  //Each other player draws a card
        5: 1314:  for (i = 0; i < state->numPlayers; i++){
        4: 1315:    if ( i != currentPlayer )
        -: 1316:    {
        3: 1317:      drawCard(i, state);
        -: 1318:    }
        -: 1319:  }
        -: 1320:      
        -: 1321:  //put played card in played card pile
        1: 1322:  discardCard(handPos, currentPlayer, state, 0);
        1: 1323:}
        -: 1324:
      101: 1325:void smithyCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1326:  int i;
      404: 1327:  for (i = 0; i < 3; i++)
        -: 1328:  {
      303: 1329:    drawCard(currentPlayer, state);
        -: 1330:  }
        -: 1331:      
        -: 1332:  //discard card from hand
      101: 1333:  discardCard(handPos, currentPlayer, state, 0);
      101: 1334:}
        -: 1335:
      101: 1336:void villageCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1337:  //+1 Card
      101: 1338:  drawCard(currentPlayer, state);
        -: 1339:      
        -: 1340:  //+2 Actions
      101: 1341:  state->numActions = state->numActions + 2;
        -: 1342:      
        -: 1343:  //discard played card from hand
      101: 1344:  discardCard(handPos, currentPlayer, state, 0);
      101: 1345:}
        -: 1346:
        -: 1347://end of dominion.c
        -: 1348:
Testing gainCard: to deck
Card added to deck? Comparing 5 to 5... TEST PASSED
Card was smithy? Comparing 4 to 4... TEST PASSED
Smithy supply decreased? Comparing -1 to -1... TEST PASSED
Testing gainCard: to discard
Card added to discard? Comparing 0 to 0... TEST PASSED
Card was smithy? Comparing 0 to 0... TEST PASSED
Smithy supply decreased? Comparing -1 to -1... TEST PASSED
File 'dominion.c'
Lines executed:34.28% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:15
        -:    0:Programs:15
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    24535:    8:int compare(const void* a, const void* b) {
    24535:    9:  if (*(int*)a > *(int*)b)
     3041:   10:    return 1;
    21494:   11:  if (*(int*)a < *(int*)b)
     7898:   12:    return -1;
    13596:   13:  return 0;
        -:   14:}
        -:   15:
      309:   16:struct gameState* newGame() {
      309:   17:  struct gameState* g = malloc(sizeof(struct gameState));
      309:   18:  return g;
        -:   19:}
        -:   20:
      311:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
      311:   23:  int* k = malloc(10 * sizeof(int));
      311:   24:  k[0] = k1;
      311:   25:  k[1] = k2;
      311:   26:  k[2] = k3;
      311:   27:  k[3] = k4;
      311:   28:  k[4] = k5;
      311:   29:  k[5] = k6;
      311:   30:  k[6] = k7;
      311:   31:  k[7] = k8;
      311:   32:  k[8] = k9;
      311:   33:  k[9] = k10;
      311:   34:  return k;
        -:   35:}
        -:   36:
      309:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      309:   44:  SelectStream(1);
      309:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      309:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      309:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3399:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    33990:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    30900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      309:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      309:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      309:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      309:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      309:   95:      state->supplyCount[estate] = 12;
      309:   96:      state->supplyCount[duchy] = 12;
      309:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      309:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      309:  102:  state->supplyCount[silver] = 40;
      309:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     6489:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    64890:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    59946:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1236:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      618:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      309:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      927:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1236:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    58710:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1545:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1236:  140:      state->deckCount[i] = 0;
     4944:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3708:  143:	  state->deck[i][j] = estate;
     3708:  144:	  state->deckCount[i]++;
        -:  145:	}
     9888:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     8652:  148:	  state->deck[i][j] = copper;
     8652:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1545:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1236:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1545:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1236:  166:      state->handCount[i] = 0;
     1236:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     8652:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     8343:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      309:  182:  state->outpostPlayed = 0;
      309:  183:  state->phase = 0;
      309:  184:  state->numActions = 1;
      309:  185:  state->numBuys = 1;
      309:  186:  state->playedCardCount = 0;
      309:  187:  state->whoseTurn = 0;
      309:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1854:  192:  for (it = 0; it < 5; it++){
     1545:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      309:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      309:  198:  return 0;
        -:  199:}
        -:  200:
     1238:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1238:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1238:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1238:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15645:  214:  while (state->deckCount[player] > 0) {
    13169:  215:    card = floor(Random() * state->deckCount[player]);
    13169:  216:    newDeck[newDeckPos] = state->deck[player][card];
    13169:  217:    newDeckPos++;
   122915:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   109746:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    13169:  221:    state->deckCount[player]--;
        -:  222:  }
    14407:  223:  for (i = 0; i < newDeckPos; i++) {
    13169:  224:    state->deck[player][i] = newDeck[i];
    13169:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1238:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     2704:  320:int supplyCount(int card, struct gameState *state) {
     2704:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      304:  346:int whoseTurn(struct gameState *state) {
      304:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     4606:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     4606:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      811:  533:    for (i = 0; i < state->discardCount[player];i++){
      809:  534:      state->deck[player][i] = state->discard[player][i];
      809:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     4604:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     4604:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     4604:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     4604:  576:    state->deckCount[player]--;
     4604:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     4606:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      304:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      304:  653:  int currentPlayer = whoseTurn(state);
      304:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      304:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      304:  658:  int drawntreasure=0;
        -:  659:  //int cardDrawn;
      304:  660:  int z = 0;// this is the counter for the temp hand
      304:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
      304:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
      101:  670:      adventurerCardEffect(drawntreasure, temphand, z, currentPlayer, state);
      101:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
        1:  674:      council_roomCardEffect(currentPlayer, state, handPos);
        1:  675:      return 0;
        -:  676:			
        -:  677:    case feast:
    #####:  678:      feastCardEffect(choice1, temphand, currentPlayer, state, handPos);
    #####:  679:      return 0;
        -:  680:			
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
        -:  741:
        -:  742:
    #####:  743:      return 0;
        -:  744:		
        -:  745:    case smithy:
        -:  746:      //+3 Cards
      101:  747:      smithyCardEffect(currentPlayer,state,handPos);
      101:  748:      return 0;
        -:  749:		
        -:  750:    case village:
      101:  751:      villageCardEffect(currentPlayer,state,handPos);
      101:  752:      return 0;
        -:  753:		
        -:  754:    case baron:
    #####:  755:      state->numBuys++;//Increase buys by 1!
    #####:  756:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  757:	int p = 0;//Iterator for hand!
    #####:  758:	int card_not_discarded = 1;//Flag for discard set!
    #####:  759:	while(card_not_discarded){
    #####:  760:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  761:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  762:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  763:	    state->discardCount[currentPlayer]++;
    #####:  764:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  765:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  766:	    }
    #####:  767:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  768:	    state->handCount[currentPlayer]--;
    #####:  769:	    card_not_discarded = 0;//Exit the loop
        -:  770:	  }
    #####:  771:	  else if (p > state->handCount[currentPlayer]){
        -:  772:	    if(DEBUG) {
        -:  773:	      printf("No estate cards in your hand, invalid choice\n");
        -:  774:	      printf("Must gain an estate if there are any\n");
        -:  775:	    }
    #####:  776:	    if (supplyCount(estate, state) > 0){
    #####:  777:	      gainCard(estate, state, 0, currentPlayer);
    #####:  778:	      state->supplyCount[estate]--;//Decrement estates
    #####:  779:	      if (supplyCount(estate, state) == 0){
    #####:  780:		isGameOver(state);
        -:  781:	      }
        -:  782:	    }
    #####:  783:	    card_not_discarded = 0;//Exit the loop
        -:  784:	  }
        -:  785:			    
        -:  786:	  else{
    #####:  787:	    p++;//Next card
        -:  788:	  }
        -:  789:	}
        -:  790:      }
        -:  791:			    
        -:  792:      else{
    #####:  793:	if (supplyCount(estate, state) > 0){
    #####:  794:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  795:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  796:	  if (supplyCount(estate, state) == 0){
    #####:  797:	    isGameOver(state);
        -:  798:	  }
        -:  799:	}
        -:  800:      }
        -:  801:	    
        -:  802:      
    #####:  803:      return 0;
        -:  804:		
        -:  805:    case great_hall:
        -:  806:      //+1 Card
    #####:  807:      drawCard(currentPlayer, state);
        -:  808:			
        -:  809:      //+1 Actions
    #####:  810:      state->numActions++;
        -:  811:			
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
    #####:  814:      return 0;
        -:  815:		
        -:  816:    case minion:
        -:  817:      //+1 action
    #####:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
        -:  822:			
    #####:  823:      if (choice1)		//+2 coins
        -:  824:	{
    #####:  825:	  state->coins = state->coins + 2;
        -:  826:	}
        -:  827:			
    #####:  828:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  829:	{
        -:  830:	  //discard hand
    #####:  831:	  while(numHandCards(state) > 0)
        -:  832:	    {
    #####:  833:	      discardCard(handPos, currentPlayer, state, 0);
        -:  834:	    }
        -:  835:				
        -:  836:	  //draw 4
    #####:  837:	  for (i = 0; i < 4; i++)
        -:  838:	    {
    #####:  839:	      drawCard(currentPlayer, state);
        -:  840:	    }
        -:  841:				
        -:  842:	  //other players discard hand and redraw if hand size > 4
    #####:  843:	  for (i = 0; i < state->numPlayers; i++)
        -:  844:	    {
    #####:  845:	      if (i != currentPlayer)
        -:  846:		{
    #####:  847:		  if ( state->handCount[i] > 4 )
        -:  848:		    {
        -:  849:		      //discard hand
    #####:  850:		      while( state->handCount[i] > 0 )
        -:  851:			{
    #####:  852:			  discardCard(handPos, i, state, 0);
        -:  853:			}
        -:  854:							
        -:  855:		      //draw 4
    #####:  856:		      for (j = 0; j < 4; j++)
        -:  857:			{
    #####:  858:			  drawCard(i, state);
        -:  859:			}
        -:  860:		    }
        -:  861:		}
        -:  862:	    }
        -:  863:				
        -:  864:	}
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case steward:
    #####:  868:      if (choice1 == 1)
        -:  869:	{
        -:  870:	  //+2 cards
    #####:  871:	  drawCard(currentPlayer, state);
    #####:  872:	  drawCard(currentPlayer, state);
        -:  873:	}
    #####:  874:      else if (choice1 == 2)
        -:  875:	{
        -:  876:	  //+2 coins
    #####:  877:	  state->coins = state->coins + 2;
        -:  878:	}
        -:  879:      else
        -:  880:	{
        -:  881:	  //trash 2 cards in hand
    #####:  882:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  883:	  discardCard(choice3, currentPlayer, state, 1);
        -:  884:	}
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case tribute:
    #####:  891:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  892:	if (state->deckCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	  state->deckCount[nextPlayer]--;
        -:  895:	}
    #####:  896:	else if (state->discardCount[nextPlayer] > 0){
    #####:  897:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  898:	  state->discardCount[nextPlayer]--;
        -:  899:	}
        -:  900:	else{
        -:  901:	  //No Card to Reveal
        -:  902:	  if (DEBUG){
        -:  903:	    printf("No cards to reveal\n");
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:	    
        -:  908:      else{
    #####:  909:	if (state->deckCount[nextPlayer] == 0){
    #####:  910:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  911:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  912:	    state->deckCount[nextPlayer]++;
    #####:  913:	    state->discard[nextPlayer][i] = -1;
    #####:  914:	    state->discardCount[nextPlayer]--;
        -:  915:	  }
        -:  916:			    
    #####:  917:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  918:	} 
    #####:  919:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
    #####:  922:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
        -:  925:      }    
        -:  926:		       
    #####:  927:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  928:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  929:	state->playedCardCount++;
    #####:  930:	tributeRevealedCards[1] = -1;
        -:  931:      }
        -:  932:
    #####:  933:      for (i = 0; i <= 2; i ++){
    #####:  934:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  935:	  state->coins += 2;
        -:  936:	}
        -:  937:		    
    #####:  938:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  939:	  drawCard(currentPlayer, state);
    #####:  940:	  drawCard(currentPlayer, state);
        -:  941:	}
        -:  942:	else{//Action Card
    #####:  943:	  state->numActions = state->numActions + 2;
        -:  944:	}
        -:  945:      }
        -:  946:	    
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case ambassador:
    #####:  950:      j = 0;		//used to check if player has enough cards to discard
        -:  951:
    #####:  952:      if (choice2 > 2 || choice2 < 0)
        -:  953:	{
    #####:  954:	  return -1;				
        -:  955:	}
        -:  956:
    #####:  957:      if (choice1 == handPos)
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  963:	{
    #####:  964:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  965:	    {
    #####:  966:	      j++;
        -:  967:	    }
        -:  968:	}
    #####:  969:      if (j < choice2)
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
        -:  974:      if (DEBUG) 
        -:  975:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  976:
        -:  977:      //increase supply count for choosen card by amount being discarded
    #####:  978:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  979:			
        -:  980:      //each other player gains a copy of revealed card
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
        -:  984:	    {
    #####:  985:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  986:	    }
        -:  987:	}
        -:  988:
        -:  989:      //discard played card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);			
        -:  991:
        -:  992:      //trash copies of cards returned to supply
    #####:  993:      for (j = 0; j < choice2; j++)
        -:  994:	{
    #####:  995:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:	    {
    #####:  997:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  998:		{
    #####:  999:		  discardCard(i, currentPlayer, state, 1);
    #####: 1000:		  break;
        -: 1001:		}
        -: 1002:	    }
        -: 1003:	}			
        -: 1004:
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case cutpurse:
        -: 1008:
    #####: 1009:      updateCoins(currentPlayer, state, 2);
    #####: 1010:      for (i = 0; i < state->numPlayers; i++)
        -: 1011:	{
    #####: 1012:	  if (i != currentPlayer)
        -: 1013:	    {
    #####: 1014:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1015:		{
    #####: 1016:		  if (state->hand[i][j] == copper)
        -: 1017:		    {
    #####: 1018:		      discardCard(j, i, state, 0);
    #####: 1019:		      break;
        -: 1020:		    }
    #####: 1021:		  if (j == state->handCount[i])
        -: 1022:		    {
    #####: 1023:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1024:			{
        -: 1025:			  if (DEBUG)
        -: 1026:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1027:			}	
    #####: 1028:		      break;
        -: 1029:		    }		
        -: 1030:		}
        -: 1031:					
        -: 1032:	    }
        -: 1033:				
        -: 1034:	}				
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1038:
    #####: 1039:      return 0;
        -: 1040:
        -: 1041:		
        -: 1042:    case embargo: 
        -: 1043:      //+2 Coins
    #####: 1044:      state->coins = state->coins + 2;
        -: 1045:			
        -: 1046:      //see if selected pile is in play
    #####: 1047:      if ( state->supplyCount[choice1] == -1 )
        -: 1048:	{
    #####: 1049:	  return -1;
        -: 1050:	}
        -: 1051:			
        -: 1052:      //add embargo token to selected supply pile
    #####: 1053:      state->embargoTokens[choice1]++;
        -: 1054:			
        -: 1055:      //trash card
    #####: 1056:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case outpost:
        -: 1060:      //set outpost flag
    #####: 1061:      state->outpostPlayed++;
        -: 1062:			
        -: 1063:      //discard card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case salvager:
        -: 1068:      //+1 buy
    #####: 1069:      state->numBuys++;
        -: 1070:			
    #####: 1071:      if (choice1)
        -: 1072:	{
        -: 1073:	  //gain coins equal to trashed card
    #####: 1074:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1075:	  //trash card
    #####: 1076:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1077:	}
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case sea_hag:
    #####: 1084:      for (i = 0; i < state->numPlayers; i++){
    #####: 1085:	if (i != currentPlayer){
    #####: 1086:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1087:	  state->discardCount[i]++;
    #####: 1088:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1089:	}
        -: 1090:      }
    #####: 1091:      return 0;
        -: 1092:		
        -: 1093:    case treasure_map:
        -: 1094:      //search hand for another treasure_map
    #####: 1095:      index = -1;
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	{
    #####: 1098:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1099:	    {
    #####: 1100:	      index = i;
    #####: 1101:	      break;
        -: 1102:	    }
        -: 1103:	}
    #####: 1104:      if (index > -1)
        -: 1105:	{
        -: 1106:	  //trash both treasure cards
    #####: 1107:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1108:	  discardCard(index, currentPlayer, state, 1);
        -: 1109:
        -: 1110:	  //gain 4 Gold cards
    #####: 1111:	  for (i = 0; i < 4; i++)
        -: 1112:	    {
    #####: 1113:	      gainCard(gold, state, 1, currentPlayer);
        -: 1114:	    }
        -: 1115:				
        -: 1116:	  //return success
    #####: 1117:	  return 1;
        -: 1118:	}
        -: 1119:			
        -: 1120:      //no second treasure_map found in hand
    #####: 1121:      return -1;
        -: 1122:    }
        -: 1123:	
    #####: 1124:  return -1;
        -: 1125:}
        -: 1126:
      204: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1128:{
        -: 1129:	
        -: 1130:  //if card is not trashed, added to Played pile 
      204: 1131:  if (trashFlag < 1)
        -: 1132:    {
        -: 1133:      //add card to played pile
      203: 1134:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      203: 1135:      state->playedCardCount++;
        -: 1136:    }
        -: 1137:	
        -: 1138:  //set played card to -1
      204: 1139:  state->hand[currentPlayer][handPos] = -1;
        -: 1140:	
        -: 1141:  //remove card from player's hand
      204: 1142:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
       11: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
      193: 1147:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
    #####: 1150:      state->handCount[currentPlayer]--;
        -: 1151:    }
        -: 1152:  else 	
        -: 1153:    {
        -: 1154:      //replace discarded card with last card in hand
      193: 1155:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:      //set last card to -1
      193: 1157:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:      //reduce number of cards in hand
      193: 1159:      state->handCount[currentPlayer]--;
        -: 1160:    }
        -: 1161:	
      204: 1162:  return 0;
        -: 1163:}
        -: 1164:
     2704: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1166:{
        -: 1167:  //Note: supplyPos is enum of choosen card
        -: 1168:	
        -: 1169:  //check if supply pile is empty (0) or card is not used in game (-1)
     2704: 1170:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1171:    {
        4: 1172:      return -1;
        -: 1173:    }
        -: 1174:	
        -: 1175:  //added card for [whoseTurn] current player:
        -: 1176:  // toFlag = 0 : add to discard
        -: 1177:  // toFlag = 1 : add to deck
        -: 1178:  // toFlag = 2 : add to hand
        -: 1179:
     2700: 1180:  if (toFlag == 1)
        -: 1181:    {
     2700: 1182:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     2700: 1183:      state->deckCount[player]++;
        -: 1184:    }
    #####: 1185:  else if (toFlag == 2)
        -: 1186:    {
    #####: 1187:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1188:      state->handCount[player]++;
        -: 1189:    }
        -: 1190:  else
        -: 1191:    {
    #####: 1192:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1193:      state->discardCount[player]++;
        -: 1194:    }
        -: 1195:	
        -: 1196:  //decrease number in supply pile
     2700: 1197:  state->supplyCount[supplyPos]--;
        -: 1198:	 
     2700: 1199:  return 0;
        -: 1200:}
        -: 1201:
      315: 1202:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1203:{
        -: 1204:  int i;
        -: 1205:	
        -: 1206:  //reset coin count
      315: 1207:  state->coins = 0;
        -: 1208:
        -: 1209:  //add coins for each Treasure card in player's hand
     1870: 1210:  for (i = 0; i < state->handCount[player]; i++)
        -: 1211:    {
     1555: 1212:      if (state->hand[player][i] == copper)
        -: 1213:	{
     1229: 1214:	  state->coins += 1;
        -: 1215:	}
      326: 1216:      else if (state->hand[player][i] == silver)
        -: 1217:	{
    #####: 1218:	  state->coins += 2;
        -: 1219:	}
      326: 1220:      else if (state->hand[player][i] == gold)
        -: 1221:	{
    #####: 1222:	  state->coins += 3;
        -: 1223:	}	
        -: 1224:    }	
        -: 1225:
        -: 1226:  //add bonus
      315: 1227:  state->coins += bonus;
        -: 1228:
      315: 1229:  return 0;
        -: 1230:}
        -: 1231:
      101: 1232:void adventurerCardEffect(int drawntreasure, int temphand[], int z, int currentPlayer, struct gameState *state){
      852: 1233:  while(drawntreasure<2){
      650: 1234:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1235:      shuffle(currentPlayer, state);
        -: 1236:    }
      650: 1237:    drawCard(currentPlayer, state);
      650: 1238:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      650: 1239:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      202: 1240:      drawntreasure++;
        -: 1241:    else{
      448: 1242:      temphand[z]=cardDrawn;
      448: 1243:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      448: 1244:      z++;
        -: 1245:    }
        -: 1246:  }
      650: 1247:  while(z-1>=0){
      448: 1248:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      448: 1249:    z=z-1;
        -: 1250:  }
      101: 1251:}
        -: 1252:
    #####: 1253:void feastCardEffect(int choice1, int temphand[], int currentPlayer, struct gameState *state, int handPos){
        -: 1254:  int i;
    #####: 1255:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1256:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1257:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1258:  }
        -: 1259:  //Backup hand
        -: 1260:  
        -: 1261:  //Update Coins for Buy
    #####: 1262:  updateCoins(currentPlayer, state, 5);
    #####: 1263:  int x = 1;//Condition to loop on
    #####: 1264:  while( x == 1) {//Buy one card
    #####: 1265:    if (supplyCount(choice1, state) <= 0){
        -: 1266:      if (DEBUG)
        -: 1267:        printf("None of that card left, sorry!\n");
        -: 1268:
        -: 1269:      if (DEBUG)
        -: 1270:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1271:    }
    #####: 1272:    else if (state->coins < getCost(choice1)){
    #####: 1273:      printf("That card is too expensive!\n");
        -: 1274:
        -: 1275:      if (DEBUG){
        -: 1276:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1277:      }
        -: 1278:    }
        -: 1279:    else{
        -: 1280:
        -: 1281:      if (DEBUG){
        -: 1282:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1283:      }
        -: 1284:
    #####: 1285:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1286:      x = 0;//No more buying cards
        -: 1287:
        -: 1288:      if (DEBUG){
        -: 1289:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1290:      }
        -: 1291:
        -: 1292:    }
        -: 1293:  }     
        -: 1294:
        -: 1295:  //Reset Hand
    #####: 1296:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1297:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1298:    temphand[i] = -1;
        -: 1299:  }
    #####: 1300:} 
        -: 1301:
        -: 1302:
        1: 1303:void council_roomCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1304:  int i;
        -: 1305:  //+4 Cards
        5: 1306:  for (i = 0; i < 4; i++){
        4: 1307:    drawCard(currentPlayer, state);
        -: 1308:  }
        -: 1309:      
        -: 1310:  //+1 Buy
        1: 1311:  state->numBuys++;
        -: 1312:      
        -: 1313:  //Each other player draws a card
        5: 1314:  for (i = 0; i < state->numPlayers; i++){
        4: 1315:    if ( i != currentPlayer )
        -: 1316:    {
        3: 1317:      drawCard(i, state);
        -: 1318:    }
        -: 1319:  }
        -: 1320:      
        -: 1321:  //put played card in played card pile
        1: 1322:  discardCard(handPos, currentPlayer, state, 0);
        1: 1323:}
        -: 1324:
      101: 1325:void smithyCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1326:  int i;
      404: 1327:  for (i = 0; i < 3; i++)
        -: 1328:  {
      303: 1329:    drawCard(currentPlayer, state);
        -: 1330:  }
        -: 1331:      
        -: 1332:  //discard card from hand
      101: 1333:  discardCard(handPos, currentPlayer, state, 0);
      101: 1334:}
        -: 1335:
      101: 1336:void villageCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1337:  //+1 Card
      101: 1338:  drawCard(currentPlayer, state);
        -: 1339:      
        -: 1340:  //+2 Actions
      101: 1341:  state->numActions = state->numActions + 2;
        -: 1342:      
        -: 1343:  //discard played card from hand
      101: 1344:  discardCard(handPos, currentPlayer, state, 0);
      101: 1345:}
        -: 1346:
        -: 1347://end of dominion.c
        -: 1348:
Testing discardCard:
Played card set to -1? Comparing 1 to -1... TEST FAILED
Played hand count decreased? Comparing 4 to 4... TEST PASSED
File 'dominion.c'
Lines executed:34.28% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:16
        -:    0:Programs:16
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    24595:    8:int compare(const void* a, const void* b) {
    24595:    9:  if (*(int*)a > *(int*)b)
     3041:   10:    return 1;
    21554:   11:  if (*(int*)a < *(int*)b)
     7914:   12:    return -1;
    13640:   13:  return 0;
        -:   14:}
        -:   15:
      310:   16:struct gameState* newGame() {
      310:   17:  struct gameState* g = malloc(sizeof(struct gameState));
      310:   18:  return g;
        -:   19:}
        -:   20:
      312:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
      312:   23:  int* k = malloc(10 * sizeof(int));
      312:   24:  k[0] = k1;
      312:   25:  k[1] = k2;
      312:   26:  k[2] = k3;
      312:   27:  k[3] = k4;
      312:   28:  k[4] = k5;
      312:   29:  k[5] = k6;
      312:   30:  k[6] = k7;
      312:   31:  k[7] = k8;
      312:   32:  k[8] = k9;
      312:   33:  k[9] = k10;
      312:   34:  return k;
        -:   35:}
        -:   36:
      310:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      310:   44:  SelectStream(1);
      310:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      310:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      310:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3410:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    34100:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    31000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      310:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      310:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      310:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      310:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      310:   95:      state->supplyCount[estate] = 12;
      310:   96:      state->supplyCount[duchy] = 12;
      310:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      310:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      310:  102:  state->supplyCount[silver] = 40;
      310:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     6510:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    65100:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    60140:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1240:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      620:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      310:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      930:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1240:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    58900:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1550:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1240:  140:      state->deckCount[i] = 0;
     4960:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3720:  143:	  state->deck[i][j] = estate;
     3720:  144:	  state->deckCount[i]++;
        -:  145:	}
     9920:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     8680:  148:	  state->deck[i][j] = copper;
     8680:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1550:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1240:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1550:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1240:  166:      state->handCount[i] = 0;
     1240:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     8680:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     8370:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      310:  182:  state->outpostPlayed = 0;
      310:  183:  state->phase = 0;
      310:  184:  state->numActions = 1;
      310:  185:  state->numBuys = 1;
      310:  186:  state->playedCardCount = 0;
      310:  187:  state->whoseTurn = 0;
      310:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1860:  192:  for (it = 0; it < 5; it++){
     1550:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      310:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      310:  198:  return 0;
        -:  199:}
        -:  200:
     1242:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1242:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1242:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1242:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15693:  214:  while (state->deckCount[player] > 0) {
    13209:  215:    card = floor(Random() * state->deckCount[player]);
    13209:  216:    newDeck[newDeckPos] = state->deck[player][card];
    13209:  217:    newDeckPos++;
   123046:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   109837:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    13209:  221:    state->deckCount[player]--;
        -:  222:  }
    14451:  223:  for (i = 0; i < newDeckPos; i++) {
    13209:  224:    state->deck[player][i] = newDeck[i];
    13209:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1242:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     2704:  320:int supplyCount(int card, struct gameState *state) {
     2704:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      304:  346:int whoseTurn(struct gameState *state) {
      304:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     4611:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     4611:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      811:  533:    for (i = 0; i < state->discardCount[player];i++){
      809:  534:      state->deck[player][i] = state->discard[player][i];
      809:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     4609:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     4609:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     4609:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     4609:  576:    state->deckCount[player]--;
     4609:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     4611:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      304:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      304:  653:  int currentPlayer = whoseTurn(state);
      304:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      304:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      304:  658:  int drawntreasure=0;
        -:  659:  //int cardDrawn;
      304:  660:  int z = 0;// this is the counter for the temp hand
      304:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
      304:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
      101:  670:      adventurerCardEffect(drawntreasure, temphand, z, currentPlayer, state);
      101:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
        1:  674:      council_roomCardEffect(currentPlayer, state, handPos);
        1:  675:      return 0;
        -:  676:			
        -:  677:    case feast:
    #####:  678:      feastCardEffect(choice1, temphand, currentPlayer, state, handPos);
    #####:  679:      return 0;
        -:  680:			
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
        -:  741:
        -:  742:
    #####:  743:      return 0;
        -:  744:		
        -:  745:    case smithy:
        -:  746:      //+3 Cards
      101:  747:      smithyCardEffect(currentPlayer,state,handPos);
      101:  748:      return 0;
        -:  749:		
        -:  750:    case village:
      101:  751:      villageCardEffect(currentPlayer,state,handPos);
      101:  752:      return 0;
        -:  753:		
        -:  754:    case baron:
    #####:  755:      state->numBuys++;//Increase buys by 1!
    #####:  756:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  757:	int p = 0;//Iterator for hand!
    #####:  758:	int card_not_discarded = 1;//Flag for discard set!
    #####:  759:	while(card_not_discarded){
    #####:  760:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  761:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  762:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  763:	    state->discardCount[currentPlayer]++;
    #####:  764:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  765:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  766:	    }
    #####:  767:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  768:	    state->handCount[currentPlayer]--;
    #####:  769:	    card_not_discarded = 0;//Exit the loop
        -:  770:	  }
    #####:  771:	  else if (p > state->handCount[currentPlayer]){
        -:  772:	    if(DEBUG) {
        -:  773:	      printf("No estate cards in your hand, invalid choice\n");
        -:  774:	      printf("Must gain an estate if there are any\n");
        -:  775:	    }
    #####:  776:	    if (supplyCount(estate, state) > 0){
    #####:  777:	      gainCard(estate, state, 0, currentPlayer);
    #####:  778:	      state->supplyCount[estate]--;//Decrement estates
    #####:  779:	      if (supplyCount(estate, state) == 0){
    #####:  780:		isGameOver(state);
        -:  781:	      }
        -:  782:	    }
    #####:  783:	    card_not_discarded = 0;//Exit the loop
        -:  784:	  }
        -:  785:			    
        -:  786:	  else{
    #####:  787:	    p++;//Next card
        -:  788:	  }
        -:  789:	}
        -:  790:      }
        -:  791:			    
        -:  792:      else{
    #####:  793:	if (supplyCount(estate, state) > 0){
    #####:  794:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  795:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  796:	  if (supplyCount(estate, state) == 0){
    #####:  797:	    isGameOver(state);
        -:  798:	  }
        -:  799:	}
        -:  800:      }
        -:  801:	    
        -:  802:      
    #####:  803:      return 0;
        -:  804:		
        -:  805:    case great_hall:
        -:  806:      //+1 Card
    #####:  807:      drawCard(currentPlayer, state);
        -:  808:			
        -:  809:      //+1 Actions
    #####:  810:      state->numActions++;
        -:  811:			
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
    #####:  814:      return 0;
        -:  815:		
        -:  816:    case minion:
        -:  817:      //+1 action
    #####:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
        -:  822:			
    #####:  823:      if (choice1)		//+2 coins
        -:  824:	{
    #####:  825:	  state->coins = state->coins + 2;
        -:  826:	}
        -:  827:			
    #####:  828:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  829:	{
        -:  830:	  //discard hand
    #####:  831:	  while(numHandCards(state) > 0)
        -:  832:	    {
    #####:  833:	      discardCard(handPos, currentPlayer, state, 0);
        -:  834:	    }
        -:  835:				
        -:  836:	  //draw 4
    #####:  837:	  for (i = 0; i < 4; i++)
        -:  838:	    {
    #####:  839:	      drawCard(currentPlayer, state);
        -:  840:	    }
        -:  841:				
        -:  842:	  //other players discard hand and redraw if hand size > 4
    #####:  843:	  for (i = 0; i < state->numPlayers; i++)
        -:  844:	    {
    #####:  845:	      if (i != currentPlayer)
        -:  846:		{
    #####:  847:		  if ( state->handCount[i] > 4 )
        -:  848:		    {
        -:  849:		      //discard hand
    #####:  850:		      while( state->handCount[i] > 0 )
        -:  851:			{
    #####:  852:			  discardCard(handPos, i, state, 0);
        -:  853:			}
        -:  854:							
        -:  855:		      //draw 4
    #####:  856:		      for (j = 0; j < 4; j++)
        -:  857:			{
    #####:  858:			  drawCard(i, state);
        -:  859:			}
        -:  860:		    }
        -:  861:		}
        -:  862:	    }
        -:  863:				
        -:  864:	}
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case steward:
    #####:  868:      if (choice1 == 1)
        -:  869:	{
        -:  870:	  //+2 cards
    #####:  871:	  drawCard(currentPlayer, state);
    #####:  872:	  drawCard(currentPlayer, state);
        -:  873:	}
    #####:  874:      else if (choice1 == 2)
        -:  875:	{
        -:  876:	  //+2 coins
    #####:  877:	  state->coins = state->coins + 2;
        -:  878:	}
        -:  879:      else
        -:  880:	{
        -:  881:	  //trash 2 cards in hand
    #####:  882:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  883:	  discardCard(choice3, currentPlayer, state, 1);
        -:  884:	}
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case tribute:
    #####:  891:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  892:	if (state->deckCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	  state->deckCount[nextPlayer]--;
        -:  895:	}
    #####:  896:	else if (state->discardCount[nextPlayer] > 0){
    #####:  897:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  898:	  state->discardCount[nextPlayer]--;
        -:  899:	}
        -:  900:	else{
        -:  901:	  //No Card to Reveal
        -:  902:	  if (DEBUG){
        -:  903:	    printf("No cards to reveal\n");
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:	    
        -:  908:      else{
    #####:  909:	if (state->deckCount[nextPlayer] == 0){
    #####:  910:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  911:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  912:	    state->deckCount[nextPlayer]++;
    #####:  913:	    state->discard[nextPlayer][i] = -1;
    #####:  914:	    state->discardCount[nextPlayer]--;
        -:  915:	  }
        -:  916:			    
    #####:  917:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  918:	} 
    #####:  919:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
    #####:  922:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
        -:  925:      }    
        -:  926:		       
    #####:  927:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  928:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  929:	state->playedCardCount++;
    #####:  930:	tributeRevealedCards[1] = -1;
        -:  931:      }
        -:  932:
    #####:  933:      for (i = 0; i <= 2; i ++){
    #####:  934:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  935:	  state->coins += 2;
        -:  936:	}
        -:  937:		    
    #####:  938:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  939:	  drawCard(currentPlayer, state);
    #####:  940:	  drawCard(currentPlayer, state);
        -:  941:	}
        -:  942:	else{//Action Card
    #####:  943:	  state->numActions = state->numActions + 2;
        -:  944:	}
        -:  945:      }
        -:  946:	    
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case ambassador:
    #####:  950:      j = 0;		//used to check if player has enough cards to discard
        -:  951:
    #####:  952:      if (choice2 > 2 || choice2 < 0)
        -:  953:	{
    #####:  954:	  return -1;				
        -:  955:	}
        -:  956:
    #####:  957:      if (choice1 == handPos)
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  963:	{
    #####:  964:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  965:	    {
    #####:  966:	      j++;
        -:  967:	    }
        -:  968:	}
    #####:  969:      if (j < choice2)
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
        -:  974:      if (DEBUG) 
        -:  975:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  976:
        -:  977:      //increase supply count for choosen card by amount being discarded
    #####:  978:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  979:			
        -:  980:      //each other player gains a copy of revealed card
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
        -:  984:	    {
    #####:  985:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  986:	    }
        -:  987:	}
        -:  988:
        -:  989:      //discard played card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);			
        -:  991:
        -:  992:      //trash copies of cards returned to supply
    #####:  993:      for (j = 0; j < choice2; j++)
        -:  994:	{
    #####:  995:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:	    {
    #####:  997:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  998:		{
    #####:  999:		  discardCard(i, currentPlayer, state, 1);
    #####: 1000:		  break;
        -: 1001:		}
        -: 1002:	    }
        -: 1003:	}			
        -: 1004:
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case cutpurse:
        -: 1008:
    #####: 1009:      updateCoins(currentPlayer, state, 2);
    #####: 1010:      for (i = 0; i < state->numPlayers; i++)
        -: 1011:	{
    #####: 1012:	  if (i != currentPlayer)
        -: 1013:	    {
    #####: 1014:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1015:		{
    #####: 1016:		  if (state->hand[i][j] == copper)
        -: 1017:		    {
    #####: 1018:		      discardCard(j, i, state, 0);
    #####: 1019:		      break;
        -: 1020:		    }
    #####: 1021:		  if (j == state->handCount[i])
        -: 1022:		    {
    #####: 1023:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1024:			{
        -: 1025:			  if (DEBUG)
        -: 1026:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1027:			}	
    #####: 1028:		      break;
        -: 1029:		    }		
        -: 1030:		}
        -: 1031:					
        -: 1032:	    }
        -: 1033:				
        -: 1034:	}				
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1038:
    #####: 1039:      return 0;
        -: 1040:
        -: 1041:		
        -: 1042:    case embargo: 
        -: 1043:      //+2 Coins
    #####: 1044:      state->coins = state->coins + 2;
        -: 1045:			
        -: 1046:      //see if selected pile is in play
    #####: 1047:      if ( state->supplyCount[choice1] == -1 )
        -: 1048:	{
    #####: 1049:	  return -1;
        -: 1050:	}
        -: 1051:			
        -: 1052:      //add embargo token to selected supply pile
    #####: 1053:      state->embargoTokens[choice1]++;
        -: 1054:			
        -: 1055:      //trash card
    #####: 1056:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case outpost:
        -: 1060:      //set outpost flag
    #####: 1061:      state->outpostPlayed++;
        -: 1062:			
        -: 1063:      //discard card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case salvager:
        -: 1068:      //+1 buy
    #####: 1069:      state->numBuys++;
        -: 1070:			
    #####: 1071:      if (choice1)
        -: 1072:	{
        -: 1073:	  //gain coins equal to trashed card
    #####: 1074:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1075:	  //trash card
    #####: 1076:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1077:	}
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case sea_hag:
    #####: 1084:      for (i = 0; i < state->numPlayers; i++){
    #####: 1085:	if (i != currentPlayer){
    #####: 1086:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1087:	  state->discardCount[i]++;
    #####: 1088:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1089:	}
        -: 1090:      }
    #####: 1091:      return 0;
        -: 1092:		
        -: 1093:    case treasure_map:
        -: 1094:      //search hand for another treasure_map
    #####: 1095:      index = -1;
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	{
    #####: 1098:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1099:	    {
    #####: 1100:	      index = i;
    #####: 1101:	      break;
        -: 1102:	    }
        -: 1103:	}
    #####: 1104:      if (index > -1)
        -: 1105:	{
        -: 1106:	  //trash both treasure cards
    #####: 1107:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1108:	  discardCard(index, currentPlayer, state, 1);
        -: 1109:
        -: 1110:	  //gain 4 Gold cards
    #####: 1111:	  for (i = 0; i < 4; i++)
        -: 1112:	    {
    #####: 1113:	      gainCard(gold, state, 1, currentPlayer);
        -: 1114:	    }
        -: 1115:				
        -: 1116:	  //return success
    #####: 1117:	  return 1;
        -: 1118:	}
        -: 1119:			
        -: 1120:      //no second treasure_map found in hand
    #####: 1121:      return -1;
        -: 1122:    }
        -: 1123:	
    #####: 1124:  return -1;
        -: 1125:}
        -: 1126:
      205: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1128:{
        -: 1129:	
        -: 1130:  //if card is not trashed, added to Played pile 
      205: 1131:  if (trashFlag < 1)
        -: 1132:    {
        -: 1133:      //add card to played pile
      203: 1134:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      203: 1135:      state->playedCardCount++;
        -: 1136:    }
        -: 1137:	
        -: 1138:  //set played card to -1
      205: 1139:  state->hand[currentPlayer][handPos] = -1;
        -: 1140:	
        -: 1141:  //remove card from player's hand
      205: 1142:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
       11: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
      194: 1147:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
    #####: 1150:      state->handCount[currentPlayer]--;
        -: 1151:    }
        -: 1152:  else 	
        -: 1153:    {
        -: 1154:      //replace discarded card with last card in hand
      194: 1155:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:      //set last card to -1
      194: 1157:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:      //reduce number of cards in hand
      194: 1159:      state->handCount[currentPlayer]--;
        -: 1160:    }
        -: 1161:	
      205: 1162:  return 0;
        -: 1163:}
        -: 1164:
     2704: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1166:{
        -: 1167:  //Note: supplyPos is enum of choosen card
        -: 1168:	
        -: 1169:  //check if supply pile is empty (0) or card is not used in game (-1)
     2704: 1170:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1171:    {
        4: 1172:      return -1;
        -: 1173:    }
        -: 1174:	
        -: 1175:  //added card for [whoseTurn] current player:
        -: 1176:  // toFlag = 0 : add to discard
        -: 1177:  // toFlag = 1 : add to deck
        -: 1178:  // toFlag = 2 : add to hand
        -: 1179:
     2700: 1180:  if (toFlag == 1)
        -: 1181:    {
     2700: 1182:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     2700: 1183:      state->deckCount[player]++;
        -: 1184:    }
    #####: 1185:  else if (toFlag == 2)
        -: 1186:    {
    #####: 1187:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1188:      state->handCount[player]++;
        -: 1189:    }
        -: 1190:  else
        -: 1191:    {
    #####: 1192:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1193:      state->discardCount[player]++;
        -: 1194:    }
        -: 1195:	
        -: 1196:  //decrease number in supply pile
     2700: 1197:  state->supplyCount[supplyPos]--;
        -: 1198:	 
     2700: 1199:  return 0;
        -: 1200:}
        -: 1201:
      316: 1202:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1203:{
        -: 1204:  int i;
        -: 1205:	
        -: 1206:  //reset coin count
      316: 1207:  state->coins = 0;
        -: 1208:
        -: 1209:  //add coins for each Treasure card in player's hand
     1876: 1210:  for (i = 0; i < state->handCount[player]; i++)
        -: 1211:    {
     1560: 1212:      if (state->hand[player][i] == copper)
        -: 1213:	{
     1233: 1214:	  state->coins += 1;
        -: 1215:	}
      327: 1216:      else if (state->hand[player][i] == silver)
        -: 1217:	{
    #####: 1218:	  state->coins += 2;
        -: 1219:	}
      327: 1220:      else if (state->hand[player][i] == gold)
        -: 1221:	{
    #####: 1222:	  state->coins += 3;
        -: 1223:	}	
        -: 1224:    }	
        -: 1225:
        -: 1226:  //add bonus
      316: 1227:  state->coins += bonus;
        -: 1228:
      316: 1229:  return 0;
        -: 1230:}
        -: 1231:
      101: 1232:void adventurerCardEffect(int drawntreasure, int temphand[], int z, int currentPlayer, struct gameState *state){
      852: 1233:  while(drawntreasure<2){
      650: 1234:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1235:      shuffle(currentPlayer, state);
        -: 1236:    }
      650: 1237:    drawCard(currentPlayer, state);
      650: 1238:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      650: 1239:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      202: 1240:      drawntreasure++;
        -: 1241:    else{
      448: 1242:      temphand[z]=cardDrawn;
      448: 1243:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      448: 1244:      z++;
        -: 1245:    }
        -: 1246:  }
      650: 1247:  while(z-1>=0){
      448: 1248:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      448: 1249:    z=z-1;
        -: 1250:  }
      101: 1251:}
        -: 1252:
    #####: 1253:void feastCardEffect(int choice1, int temphand[], int currentPlayer, struct gameState *state, int handPos){
        -: 1254:  int i;
    #####: 1255:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1256:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1257:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1258:  }
        -: 1259:  //Backup hand
        -: 1260:  
        -: 1261:  //Update Coins for Buy
    #####: 1262:  updateCoins(currentPlayer, state, 5);
    #####: 1263:  int x = 1;//Condition to loop on
    #####: 1264:  while( x == 1) {//Buy one card
    #####: 1265:    if (supplyCount(choice1, state) <= 0){
        -: 1266:      if (DEBUG)
        -: 1267:        printf("None of that card left, sorry!\n");
        -: 1268:
        -: 1269:      if (DEBUG)
        -: 1270:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1271:    }
    #####: 1272:    else if (state->coins < getCost(choice1)){
    #####: 1273:      printf("That card is too expensive!\n");
        -: 1274:
        -: 1275:      if (DEBUG){
        -: 1276:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1277:      }
        -: 1278:    }
        -: 1279:    else{
        -: 1280:
        -: 1281:      if (DEBUG){
        -: 1282:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1283:      }
        -: 1284:
    #####: 1285:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1286:      x = 0;//No more buying cards
        -: 1287:
        -: 1288:      if (DEBUG){
        -: 1289:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1290:      }
        -: 1291:
        -: 1292:    }
        -: 1293:  }     
        -: 1294:
        -: 1295:  //Reset Hand
    #####: 1296:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1297:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1298:    temphand[i] = -1;
        -: 1299:  }
    #####: 1300:} 
        -: 1301:
        -: 1302:
        1: 1303:void council_roomCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1304:  int i;
        -: 1305:  //+4 Cards
        5: 1306:  for (i = 0; i < 4; i++){
        4: 1307:    drawCard(currentPlayer, state);
        -: 1308:  }
        -: 1309:      
        -: 1310:  //+1 Buy
        1: 1311:  state->numBuys++;
        -: 1312:      
        -: 1313:  //Each other player draws a card
        5: 1314:  for (i = 0; i < state->numPlayers; i++){
        4: 1315:    if ( i != currentPlayer )
        -: 1316:    {
        3: 1317:      drawCard(i, state);
        -: 1318:    }
        -: 1319:  }
        -: 1320:      
        -: 1321:  //put played card in played card pile
        1: 1322:  discardCard(handPos, currentPlayer, state, 0);
        1: 1323:}
        -: 1324:
      101: 1325:void smithyCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1326:  int i;
      404: 1327:  for (i = 0; i < 3; i++)
        -: 1328:  {
      303: 1329:    drawCard(currentPlayer, state);
        -: 1330:  }
        -: 1331:      
        -: 1332:  //discard card from hand
      101: 1333:  discardCard(handPos, currentPlayer, state, 0);
      101: 1334:}
        -: 1335:
      101: 1336:void villageCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1337:  //+1 Card
      101: 1338:  drawCard(currentPlayer, state);
        -: 1339:      
        -: 1340:  //+2 Actions
      101: 1341:  state->numActions = state->numActions + 2;
        -: 1342:      
        -: 1343:  //discard played card from hand
      101: 1344:  discardCard(handPos, currentPlayer, state, 0);
      101: 1345:}
        -: 1346:
        -: 1347://end of dominion.c
        -: 1348:
Testing adventurer:
Comparing 7 to 5... TEST FAILED
Coins added to hand? Comparing 4 to 4... TEST PASSED
File 'dominion.c'
Lines executed:34.28% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:17
        -:    0:Programs:17
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    24655:    8:int compare(const void* a, const void* b) {
    24655:    9:  if (*(int*)a > *(int*)b)
     3041:   10:    return 1;
    21614:   11:  if (*(int*)a < *(int*)b)
     7930:   12:    return -1;
    13684:   13:  return 0;
        -:   14:}
        -:   15:
      311:   16:struct gameState* newGame() {
      311:   17:  struct gameState* g = malloc(sizeof(struct gameState));
      311:   18:  return g;
        -:   19:}
        -:   20:
      313:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
      313:   23:  int* k = malloc(10 * sizeof(int));
      313:   24:  k[0] = k1;
      313:   25:  k[1] = k2;
      313:   26:  k[2] = k3;
      313:   27:  k[3] = k4;
      313:   28:  k[4] = k5;
      313:   29:  k[5] = k6;
      313:   30:  k[6] = k7;
      313:   31:  k[7] = k8;
      313:   32:  k[8] = k9;
      313:   33:  k[9] = k10;
      313:   34:  return k;
        -:   35:}
        -:   36:
      311:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      311:   44:  SelectStream(1);
      311:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      311:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      311:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3421:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    34210:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    31100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      311:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      311:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      311:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      311:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      311:   95:      state->supplyCount[estate] = 12;
      311:   96:      state->supplyCount[duchy] = 12;
      311:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      311:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      311:  102:  state->supplyCount[silver] = 40;
      311:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     6531:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    65310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    60334:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1244:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      622:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      311:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      933:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1244:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    59090:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1555:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1244:  140:      state->deckCount[i] = 0;
     4976:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3732:  143:	  state->deck[i][j] = estate;
     3732:  144:	  state->deckCount[i]++;
        -:  145:	}
     9952:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     8708:  148:	  state->deck[i][j] = copper;
     8708:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1555:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1244:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1555:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1244:  166:      state->handCount[i] = 0;
     1244:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     8708:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     8397:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      311:  182:  state->outpostPlayed = 0;
      311:  183:  state->phase = 0;
      311:  184:  state->numActions = 1;
      311:  185:  state->numBuys = 1;
      311:  186:  state->playedCardCount = 0;
      311:  187:  state->whoseTurn = 0;
      311:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1866:  192:  for (it = 0; it < 5; it++){
     1555:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      311:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      311:  198:  return 0;
        -:  199:}
        -:  200:
     1246:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1246:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1246:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1246:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15741:  214:  while (state->deckCount[player] > 0) {
    13249:  215:    card = floor(Random() * state->deckCount[player]);
    13249:  216:    newDeck[newDeckPos] = state->deck[player][card];
    13249:  217:    newDeckPos++;
   123177:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   109928:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    13249:  221:    state->deckCount[player]--;
        -:  222:  }
    14495:  223:  for (i = 0; i < newDeckPos; i++) {
    13249:  224:    state->deck[player][i] = newDeck[i];
    13249:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1246:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     2704:  320:int supplyCount(int card, struct gameState *state) {
     2704:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      305:  346:int whoseTurn(struct gameState *state) {
      305:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     4618:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     4618:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      811:  533:    for (i = 0; i < state->discardCount[player];i++){
      809:  534:      state->deck[player][i] = state->discard[player][i];
      809:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     4616:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     4616:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     4616:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     4616:  576:    state->deckCount[player]--;
     4616:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     4618:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      305:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      305:  653:  int currentPlayer = whoseTurn(state);
      305:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      305:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      305:  658:  int drawntreasure=0;
        -:  659:  //int cardDrawn;
      305:  660:  int z = 0;// this is the counter for the temp hand
      305:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
      305:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
      102:  670:      adventurerCardEffect(drawntreasure, temphand, z, currentPlayer, state);
      102:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
        1:  674:      council_roomCardEffect(currentPlayer, state, handPos);
        1:  675:      return 0;
        -:  676:			
        -:  677:    case feast:
    #####:  678:      feastCardEffect(choice1, temphand, currentPlayer, state, handPos);
    #####:  679:      return 0;
        -:  680:			
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
        -:  741:
        -:  742:
    #####:  743:      return 0;
        -:  744:		
        -:  745:    case smithy:
        -:  746:      //+3 Cards
      101:  747:      smithyCardEffect(currentPlayer,state,handPos);
      101:  748:      return 0;
        -:  749:		
        -:  750:    case village:
      101:  751:      villageCardEffect(currentPlayer,state,handPos);
      101:  752:      return 0;
        -:  753:		
        -:  754:    case baron:
    #####:  755:      state->numBuys++;//Increase buys by 1!
    #####:  756:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  757:	int p = 0;//Iterator for hand!
    #####:  758:	int card_not_discarded = 1;//Flag for discard set!
    #####:  759:	while(card_not_discarded){
    #####:  760:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  761:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  762:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  763:	    state->discardCount[currentPlayer]++;
    #####:  764:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  765:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  766:	    }
    #####:  767:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  768:	    state->handCount[currentPlayer]--;
    #####:  769:	    card_not_discarded = 0;//Exit the loop
        -:  770:	  }
    #####:  771:	  else if (p > state->handCount[currentPlayer]){
        -:  772:	    if(DEBUG) {
        -:  773:	      printf("No estate cards in your hand, invalid choice\n");
        -:  774:	      printf("Must gain an estate if there are any\n");
        -:  775:	    }
    #####:  776:	    if (supplyCount(estate, state) > 0){
    #####:  777:	      gainCard(estate, state, 0, currentPlayer);
    #####:  778:	      state->supplyCount[estate]--;//Decrement estates
    #####:  779:	      if (supplyCount(estate, state) == 0){
    #####:  780:		isGameOver(state);
        -:  781:	      }
        -:  782:	    }
    #####:  783:	    card_not_discarded = 0;//Exit the loop
        -:  784:	  }
        -:  785:			    
        -:  786:	  else{
    #####:  787:	    p++;//Next card
        -:  788:	  }
        -:  789:	}
        -:  790:      }
        -:  791:			    
        -:  792:      else{
    #####:  793:	if (supplyCount(estate, state) > 0){
    #####:  794:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  795:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  796:	  if (supplyCount(estate, state) == 0){
    #####:  797:	    isGameOver(state);
        -:  798:	  }
        -:  799:	}
        -:  800:      }
        -:  801:	    
        -:  802:      
    #####:  803:      return 0;
        -:  804:		
        -:  805:    case great_hall:
        -:  806:      //+1 Card
    #####:  807:      drawCard(currentPlayer, state);
        -:  808:			
        -:  809:      //+1 Actions
    #####:  810:      state->numActions++;
        -:  811:			
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
    #####:  814:      return 0;
        -:  815:		
        -:  816:    case minion:
        -:  817:      //+1 action
    #####:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
        -:  822:			
    #####:  823:      if (choice1)		//+2 coins
        -:  824:	{
    #####:  825:	  state->coins = state->coins + 2;
        -:  826:	}
        -:  827:			
    #####:  828:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  829:	{
        -:  830:	  //discard hand
    #####:  831:	  while(numHandCards(state) > 0)
        -:  832:	    {
    #####:  833:	      discardCard(handPos, currentPlayer, state, 0);
        -:  834:	    }
        -:  835:				
        -:  836:	  //draw 4
    #####:  837:	  for (i = 0; i < 4; i++)
        -:  838:	    {
    #####:  839:	      drawCard(currentPlayer, state);
        -:  840:	    }
        -:  841:				
        -:  842:	  //other players discard hand and redraw if hand size > 4
    #####:  843:	  for (i = 0; i < state->numPlayers; i++)
        -:  844:	    {
    #####:  845:	      if (i != currentPlayer)
        -:  846:		{
    #####:  847:		  if ( state->handCount[i] > 4 )
        -:  848:		    {
        -:  849:		      //discard hand
    #####:  850:		      while( state->handCount[i] > 0 )
        -:  851:			{
    #####:  852:			  discardCard(handPos, i, state, 0);
        -:  853:			}
        -:  854:							
        -:  855:		      //draw 4
    #####:  856:		      for (j = 0; j < 4; j++)
        -:  857:			{
    #####:  858:			  drawCard(i, state);
        -:  859:			}
        -:  860:		    }
        -:  861:		}
        -:  862:	    }
        -:  863:				
        -:  864:	}
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case steward:
    #####:  868:      if (choice1 == 1)
        -:  869:	{
        -:  870:	  //+2 cards
    #####:  871:	  drawCard(currentPlayer, state);
    #####:  872:	  drawCard(currentPlayer, state);
        -:  873:	}
    #####:  874:      else if (choice1 == 2)
        -:  875:	{
        -:  876:	  //+2 coins
    #####:  877:	  state->coins = state->coins + 2;
        -:  878:	}
        -:  879:      else
        -:  880:	{
        -:  881:	  //trash 2 cards in hand
    #####:  882:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  883:	  discardCard(choice3, currentPlayer, state, 1);
        -:  884:	}
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case tribute:
    #####:  891:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  892:	if (state->deckCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	  state->deckCount[nextPlayer]--;
        -:  895:	}
    #####:  896:	else if (state->discardCount[nextPlayer] > 0){
    #####:  897:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  898:	  state->discardCount[nextPlayer]--;
        -:  899:	}
        -:  900:	else{
        -:  901:	  //No Card to Reveal
        -:  902:	  if (DEBUG){
        -:  903:	    printf("No cards to reveal\n");
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:	    
        -:  908:      else{
    #####:  909:	if (state->deckCount[nextPlayer] == 0){
    #####:  910:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  911:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  912:	    state->deckCount[nextPlayer]++;
    #####:  913:	    state->discard[nextPlayer][i] = -1;
    #####:  914:	    state->discardCount[nextPlayer]--;
        -:  915:	  }
        -:  916:			    
    #####:  917:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  918:	} 
    #####:  919:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
    #####:  922:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
        -:  925:      }    
        -:  926:		       
    #####:  927:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  928:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  929:	state->playedCardCount++;
    #####:  930:	tributeRevealedCards[1] = -1;
        -:  931:      }
        -:  932:
    #####:  933:      for (i = 0; i <= 2; i ++){
    #####:  934:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  935:	  state->coins += 2;
        -:  936:	}
        -:  937:		    
    #####:  938:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  939:	  drawCard(currentPlayer, state);
    #####:  940:	  drawCard(currentPlayer, state);
        -:  941:	}
        -:  942:	else{//Action Card
    #####:  943:	  state->numActions = state->numActions + 2;
        -:  944:	}
        -:  945:      }
        -:  946:	    
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case ambassador:
    #####:  950:      j = 0;		//used to check if player has enough cards to discard
        -:  951:
    #####:  952:      if (choice2 > 2 || choice2 < 0)
        -:  953:	{
    #####:  954:	  return -1;				
        -:  955:	}
        -:  956:
    #####:  957:      if (choice1 == handPos)
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  963:	{
    #####:  964:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  965:	    {
    #####:  966:	      j++;
        -:  967:	    }
        -:  968:	}
    #####:  969:      if (j < choice2)
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
        -:  974:      if (DEBUG) 
        -:  975:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  976:
        -:  977:      //increase supply count for choosen card by amount being discarded
    #####:  978:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  979:			
        -:  980:      //each other player gains a copy of revealed card
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
        -:  984:	    {
    #####:  985:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  986:	    }
        -:  987:	}
        -:  988:
        -:  989:      //discard played card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);			
        -:  991:
        -:  992:      //trash copies of cards returned to supply
    #####:  993:      for (j = 0; j < choice2; j++)
        -:  994:	{
    #####:  995:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:	    {
    #####:  997:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  998:		{
    #####:  999:		  discardCard(i, currentPlayer, state, 1);
    #####: 1000:		  break;
        -: 1001:		}
        -: 1002:	    }
        -: 1003:	}			
        -: 1004:
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case cutpurse:
        -: 1008:
    #####: 1009:      updateCoins(currentPlayer, state, 2);
    #####: 1010:      for (i = 0; i < state->numPlayers; i++)
        -: 1011:	{
    #####: 1012:	  if (i != currentPlayer)
        -: 1013:	    {
    #####: 1014:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1015:		{
    #####: 1016:		  if (state->hand[i][j] == copper)
        -: 1017:		    {
    #####: 1018:		      discardCard(j, i, state, 0);
    #####: 1019:		      break;
        -: 1020:		    }
    #####: 1021:		  if (j == state->handCount[i])
        -: 1022:		    {
    #####: 1023:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1024:			{
        -: 1025:			  if (DEBUG)
        -: 1026:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1027:			}	
    #####: 1028:		      break;
        -: 1029:		    }		
        -: 1030:		}
        -: 1031:					
        -: 1032:	    }
        -: 1033:				
        -: 1034:	}				
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1038:
    #####: 1039:      return 0;
        -: 1040:
        -: 1041:		
        -: 1042:    case embargo: 
        -: 1043:      //+2 Coins
    #####: 1044:      state->coins = state->coins + 2;
        -: 1045:			
        -: 1046:      //see if selected pile is in play
    #####: 1047:      if ( state->supplyCount[choice1] == -1 )
        -: 1048:	{
    #####: 1049:	  return -1;
        -: 1050:	}
        -: 1051:			
        -: 1052:      //add embargo token to selected supply pile
    #####: 1053:      state->embargoTokens[choice1]++;
        -: 1054:			
        -: 1055:      //trash card
    #####: 1056:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case outpost:
        -: 1060:      //set outpost flag
    #####: 1061:      state->outpostPlayed++;
        -: 1062:			
        -: 1063:      //discard card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case salvager:
        -: 1068:      //+1 buy
    #####: 1069:      state->numBuys++;
        -: 1070:			
    #####: 1071:      if (choice1)
        -: 1072:	{
        -: 1073:	  //gain coins equal to trashed card
    #####: 1074:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1075:	  //trash card
    #####: 1076:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1077:	}
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case sea_hag:
    #####: 1084:      for (i = 0; i < state->numPlayers; i++){
    #####: 1085:	if (i != currentPlayer){
    #####: 1086:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1087:	  state->discardCount[i]++;
    #####: 1088:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1089:	}
        -: 1090:      }
    #####: 1091:      return 0;
        -: 1092:		
        -: 1093:    case treasure_map:
        -: 1094:      //search hand for another treasure_map
    #####: 1095:      index = -1;
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	{
    #####: 1098:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1099:	    {
    #####: 1100:	      index = i;
    #####: 1101:	      break;
        -: 1102:	    }
        -: 1103:	}
    #####: 1104:      if (index > -1)
        -: 1105:	{
        -: 1106:	  //trash both treasure cards
    #####: 1107:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1108:	  discardCard(index, currentPlayer, state, 1);
        -: 1109:
        -: 1110:	  //gain 4 Gold cards
    #####: 1111:	  for (i = 0; i < 4; i++)
        -: 1112:	    {
    #####: 1113:	      gainCard(gold, state, 1, currentPlayer);
        -: 1114:	    }
        -: 1115:				
        -: 1116:	  //return success
    #####: 1117:	  return 1;
        -: 1118:	}
        -: 1119:			
        -: 1120:      //no second treasure_map found in hand
    #####: 1121:      return -1;
        -: 1122:    }
        -: 1123:	
    #####: 1124:  return -1;
        -: 1125:}
        -: 1126:
      205: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1128:{
        -: 1129:	
        -: 1130:  //if card is not trashed, added to Played pile 
      205: 1131:  if (trashFlag < 1)
        -: 1132:    {
        -: 1133:      //add card to played pile
      203: 1134:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      203: 1135:      state->playedCardCount++;
        -: 1136:    }
        -: 1137:	
        -: 1138:  //set played card to -1
      205: 1139:  state->hand[currentPlayer][handPos] = -1;
        -: 1140:	
        -: 1141:  //remove card from player's hand
      205: 1142:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
       11: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
      194: 1147:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
    #####: 1150:      state->handCount[currentPlayer]--;
        -: 1151:    }
        -: 1152:  else 	
        -: 1153:    {
        -: 1154:      //replace discarded card with last card in hand
      194: 1155:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:      //set last card to -1
      194: 1157:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:      //reduce number of cards in hand
      194: 1159:      state->handCount[currentPlayer]--;
        -: 1160:    }
        -: 1161:	
      205: 1162:  return 0;
        -: 1163:}
        -: 1164:
     2704: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1166:{
        -: 1167:  //Note: supplyPos is enum of choosen card
        -: 1168:	
        -: 1169:  //check if supply pile is empty (0) or card is not used in game (-1)
     2704: 1170:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1171:    {
        4: 1172:      return -1;
        -: 1173:    }
        -: 1174:	
        -: 1175:  //added card for [whoseTurn] current player:
        -: 1176:  // toFlag = 0 : add to discard
        -: 1177:  // toFlag = 1 : add to deck
        -: 1178:  // toFlag = 2 : add to hand
        -: 1179:
     2700: 1180:  if (toFlag == 1)
        -: 1181:    {
     2700: 1182:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     2700: 1183:      state->deckCount[player]++;
        -: 1184:    }
    #####: 1185:  else if (toFlag == 2)
        -: 1186:    {
    #####: 1187:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1188:      state->handCount[player]++;
        -: 1189:    }
        -: 1190:  else
        -: 1191:    {
    #####: 1192:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1193:      state->discardCount[player]++;
        -: 1194:    }
        -: 1195:	
        -: 1196:  //decrease number in supply pile
     2700: 1197:  state->supplyCount[supplyPos]--;
        -: 1198:	 
     2700: 1199:  return 0;
        -: 1200:}
        -: 1201:
      317: 1202:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1203:{
        -: 1204:  int i;
        -: 1205:	
        -: 1206:  //reset coin count
      317: 1207:  state->coins = 0;
        -: 1208:
        -: 1209:  //add coins for each Treasure card in player's hand
     1882: 1210:  for (i = 0; i < state->handCount[player]; i++)
        -: 1211:    {
     1565: 1212:      if (state->hand[player][i] == copper)
        -: 1213:	{
     1237: 1214:	  state->coins += 1;
        -: 1215:	}
      328: 1216:      else if (state->hand[player][i] == silver)
        -: 1217:	{
    #####: 1218:	  state->coins += 2;
        -: 1219:	}
      328: 1220:      else if (state->hand[player][i] == gold)
        -: 1221:	{
    #####: 1222:	  state->coins += 3;
        -: 1223:	}	
        -: 1224:    }	
        -: 1225:
        -: 1226:  //add bonus
      317: 1227:  state->coins += bonus;
        -: 1228:
      317: 1229:  return 0;
        -: 1230:}
        -: 1231:
      102: 1232:void adventurerCardEffect(int drawntreasure, int temphand[], int z, int currentPlayer, struct gameState *state){
      856: 1233:  while(drawntreasure<2){
      652: 1234:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1235:      shuffle(currentPlayer, state);
        -: 1236:    }
      652: 1237:    drawCard(currentPlayer, state);
      652: 1238:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      652: 1239:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      204: 1240:      drawntreasure++;
        -: 1241:    else{
      448: 1242:      temphand[z]=cardDrawn;
      448: 1243:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      448: 1244:      z++;
        -: 1245:    }
        -: 1246:  }
      652: 1247:  while(z-1>=0){
      448: 1248:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      448: 1249:    z=z-1;
        -: 1250:  }
      102: 1251:}
        -: 1252:
    #####: 1253:void feastCardEffect(int choice1, int temphand[], int currentPlayer, struct gameState *state, int handPos){
        -: 1254:  int i;
    #####: 1255:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1256:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1257:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1258:  }
        -: 1259:  //Backup hand
        -: 1260:  
        -: 1261:  //Update Coins for Buy
    #####: 1262:  updateCoins(currentPlayer, state, 5);
    #####: 1263:  int x = 1;//Condition to loop on
    #####: 1264:  while( x == 1) {//Buy one card
    #####: 1265:    if (supplyCount(choice1, state) <= 0){
        -: 1266:      if (DEBUG)
        -: 1267:        printf("None of that card left, sorry!\n");
        -: 1268:
        -: 1269:      if (DEBUG)
        -: 1270:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1271:    }
    #####: 1272:    else if (state->coins < getCost(choice1)){
    #####: 1273:      printf("That card is too expensive!\n");
        -: 1274:
        -: 1275:      if (DEBUG){
        -: 1276:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1277:      }
        -: 1278:    }
        -: 1279:    else{
        -: 1280:
        -: 1281:      if (DEBUG){
        -: 1282:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1283:      }
        -: 1284:
    #####: 1285:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1286:      x = 0;//No more buying cards
        -: 1287:
        -: 1288:      if (DEBUG){
        -: 1289:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1290:      }
        -: 1291:
        -: 1292:    }
        -: 1293:  }     
        -: 1294:
        -: 1295:  //Reset Hand
    #####: 1296:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1297:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1298:    temphand[i] = -1;
        -: 1299:  }
    #####: 1300:} 
        -: 1301:
        -: 1302:
        1: 1303:void council_roomCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1304:  int i;
        -: 1305:  //+4 Cards
        5: 1306:  for (i = 0; i < 4; i++){
        4: 1307:    drawCard(currentPlayer, state);
        -: 1308:  }
        -: 1309:      
        -: 1310:  //+1 Buy
        1: 1311:  state->numBuys++;
        -: 1312:      
        -: 1313:  //Each other player draws a card
        5: 1314:  for (i = 0; i < state->numPlayers; i++){
        4: 1315:    if ( i != currentPlayer )
        -: 1316:    {
        3: 1317:      drawCard(i, state);
        -: 1318:    }
        -: 1319:  }
        -: 1320:      
        -: 1321:  //put played card in played card pile
        1: 1322:  discardCard(handPos, currentPlayer, state, 0);
        1: 1323:}
        -: 1324:
      101: 1325:void smithyCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1326:  int i;
      404: 1327:  for (i = 0; i < 3; i++)
        -: 1328:  {
      303: 1329:    drawCard(currentPlayer, state);
        -: 1330:  }
        -: 1331:      
        -: 1332:  //discard card from hand
      101: 1333:  discardCard(handPos, currentPlayer, state, 0);
      101: 1334:}
        -: 1335:
      101: 1336:void villageCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1337:  //+1 Card
      101: 1338:  drawCard(currentPlayer, state);
        -: 1339:      
        -: 1340:  //+2 Actions
      101: 1341:  state->numActions = state->numActions + 2;
        -: 1342:      
        -: 1343:  //discard played card from hand
      101: 1344:  discardCard(handPos, currentPlayer, state, 0);
      101: 1345:}
        -: 1346:
        -: 1347://end of dominion.c
        -: 1348:
Testing smithy:
3 cards drawn? Comparing 7 to 7... TEST PASSED
Which cards were drawn?---
Comparing 1 to 4... TEST FAILED
Comparing 4 to 4... TEST PASSED
Comparing 4 to 4... TEST PASSED
File 'dominion.c'
Lines executed:34.28% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:18
        -:    0:Programs:18
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    24715:    8:int compare(const void* a, const void* b) {
    24715:    9:  if (*(int*)a > *(int*)b)
     3041:   10:    return 1;
    21674:   11:  if (*(int*)a < *(int*)b)
     7946:   12:    return -1;
    13728:   13:  return 0;
        -:   14:}
        -:   15:
      312:   16:struct gameState* newGame() {
      312:   17:  struct gameState* g = malloc(sizeof(struct gameState));
      312:   18:  return g;
        -:   19:}
        -:   20:
      314:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
      314:   23:  int* k = malloc(10 * sizeof(int));
      314:   24:  k[0] = k1;
      314:   25:  k[1] = k2;
      314:   26:  k[2] = k3;
      314:   27:  k[3] = k4;
      314:   28:  k[4] = k5;
      314:   29:  k[5] = k6;
      314:   30:  k[6] = k7;
      314:   31:  k[7] = k8;
      314:   32:  k[8] = k9;
      314:   33:  k[9] = k10;
      314:   34:  return k;
        -:   35:}
        -:   36:
      312:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      312:   44:  SelectStream(1);
      312:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      312:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      312:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3432:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    34320:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    31200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      312:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      312:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      312:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      312:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      312:   95:      state->supplyCount[estate] = 12;
      312:   96:      state->supplyCount[duchy] = 12;
      312:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      312:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      312:  102:  state->supplyCount[silver] = 40;
      312:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     6552:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    65520:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    60528:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1248:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      624:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      312:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      936:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1248:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    59280:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1560:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1248:  140:      state->deckCount[i] = 0;
     4992:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3744:  143:	  state->deck[i][j] = estate;
     3744:  144:	  state->deckCount[i]++;
        -:  145:	}
     9984:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     8736:  148:	  state->deck[i][j] = copper;
     8736:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1560:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1248:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1560:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1248:  166:      state->handCount[i] = 0;
     1248:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     8736:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     8424:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      312:  182:  state->outpostPlayed = 0;
      312:  183:  state->phase = 0;
      312:  184:  state->numActions = 1;
      312:  185:  state->numBuys = 1;
      312:  186:  state->playedCardCount = 0;
      312:  187:  state->whoseTurn = 0;
      312:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1872:  192:  for (it = 0; it < 5; it++){
     1560:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      312:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      312:  198:  return 0;
        -:  199:}
        -:  200:
     1250:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1250:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1250:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1250:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15789:  214:  while (state->deckCount[player] > 0) {
    13289:  215:    card = floor(Random() * state->deckCount[player]);
    13289:  216:    newDeck[newDeckPos] = state->deck[player][card];
    13289:  217:    newDeckPos++;
   123308:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   110019:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    13289:  221:    state->deckCount[player]--;
        -:  222:  }
    14539:  223:  for (i = 0; i < newDeckPos; i++) {
    13289:  224:    state->deck[player][i] = newDeck[i];
    13289:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1250:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     2704:  320:int supplyCount(int card, struct gameState *state) {
     2704:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      306:  346:int whoseTurn(struct gameState *state) {
      306:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     4626:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     4626:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      811:  533:    for (i = 0; i < state->discardCount[player];i++){
      809:  534:      state->deck[player][i] = state->discard[player][i];
      809:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     4624:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     4624:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     4624:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     4624:  576:    state->deckCount[player]--;
     4624:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     4626:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      306:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      306:  653:  int currentPlayer = whoseTurn(state);
      306:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      306:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      306:  658:  int drawntreasure=0;
        -:  659:  //int cardDrawn;
      306:  660:  int z = 0;// this is the counter for the temp hand
      306:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
      306:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
      102:  670:      adventurerCardEffect(drawntreasure, temphand, z, currentPlayer, state);
      102:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
        1:  674:      council_roomCardEffect(currentPlayer, state, handPos);
        1:  675:      return 0;
        -:  676:			
        -:  677:    case feast:
    #####:  678:      feastCardEffect(choice1, temphand, currentPlayer, state, handPos);
    #####:  679:      return 0;
        -:  680:			
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
        -:  741:
        -:  742:
    #####:  743:      return 0;
        -:  744:		
        -:  745:    case smithy:
        -:  746:      //+3 Cards
      102:  747:      smithyCardEffect(currentPlayer,state,handPos);
      102:  748:      return 0;
        -:  749:		
        -:  750:    case village:
      101:  751:      villageCardEffect(currentPlayer,state,handPos);
      101:  752:      return 0;
        -:  753:		
        -:  754:    case baron:
    #####:  755:      state->numBuys++;//Increase buys by 1!
    #####:  756:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  757:	int p = 0;//Iterator for hand!
    #####:  758:	int card_not_discarded = 1;//Flag for discard set!
    #####:  759:	while(card_not_discarded){
    #####:  760:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  761:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  762:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  763:	    state->discardCount[currentPlayer]++;
    #####:  764:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  765:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  766:	    }
    #####:  767:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  768:	    state->handCount[currentPlayer]--;
    #####:  769:	    card_not_discarded = 0;//Exit the loop
        -:  770:	  }
    #####:  771:	  else if (p > state->handCount[currentPlayer]){
        -:  772:	    if(DEBUG) {
        -:  773:	      printf("No estate cards in your hand, invalid choice\n");
        -:  774:	      printf("Must gain an estate if there are any\n");
        -:  775:	    }
    #####:  776:	    if (supplyCount(estate, state) > 0){
    #####:  777:	      gainCard(estate, state, 0, currentPlayer);
    #####:  778:	      state->supplyCount[estate]--;//Decrement estates
    #####:  779:	      if (supplyCount(estate, state) == 0){
    #####:  780:		isGameOver(state);
        -:  781:	      }
        -:  782:	    }
    #####:  783:	    card_not_discarded = 0;//Exit the loop
        -:  784:	  }
        -:  785:			    
        -:  786:	  else{
    #####:  787:	    p++;//Next card
        -:  788:	  }
        -:  789:	}
        -:  790:      }
        -:  791:			    
        -:  792:      else{
    #####:  793:	if (supplyCount(estate, state) > 0){
    #####:  794:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  795:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  796:	  if (supplyCount(estate, state) == 0){
    #####:  797:	    isGameOver(state);
        -:  798:	  }
        -:  799:	}
        -:  800:      }
        -:  801:	    
        -:  802:      
    #####:  803:      return 0;
        -:  804:		
        -:  805:    case great_hall:
        -:  806:      //+1 Card
    #####:  807:      drawCard(currentPlayer, state);
        -:  808:			
        -:  809:      //+1 Actions
    #####:  810:      state->numActions++;
        -:  811:			
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
    #####:  814:      return 0;
        -:  815:		
        -:  816:    case minion:
        -:  817:      //+1 action
    #####:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
        -:  822:			
    #####:  823:      if (choice1)		//+2 coins
        -:  824:	{
    #####:  825:	  state->coins = state->coins + 2;
        -:  826:	}
        -:  827:			
    #####:  828:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  829:	{
        -:  830:	  //discard hand
    #####:  831:	  while(numHandCards(state) > 0)
        -:  832:	    {
    #####:  833:	      discardCard(handPos, currentPlayer, state, 0);
        -:  834:	    }
        -:  835:				
        -:  836:	  //draw 4
    #####:  837:	  for (i = 0; i < 4; i++)
        -:  838:	    {
    #####:  839:	      drawCard(currentPlayer, state);
        -:  840:	    }
        -:  841:				
        -:  842:	  //other players discard hand and redraw if hand size > 4
    #####:  843:	  for (i = 0; i < state->numPlayers; i++)
        -:  844:	    {
    #####:  845:	      if (i != currentPlayer)
        -:  846:		{
    #####:  847:		  if ( state->handCount[i] > 4 )
        -:  848:		    {
        -:  849:		      //discard hand
    #####:  850:		      while( state->handCount[i] > 0 )
        -:  851:			{
    #####:  852:			  discardCard(handPos, i, state, 0);
        -:  853:			}
        -:  854:							
        -:  855:		      //draw 4
    #####:  856:		      for (j = 0; j < 4; j++)
        -:  857:			{
    #####:  858:			  drawCard(i, state);
        -:  859:			}
        -:  860:		    }
        -:  861:		}
        -:  862:	    }
        -:  863:				
        -:  864:	}
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case steward:
    #####:  868:      if (choice1 == 1)
        -:  869:	{
        -:  870:	  //+2 cards
    #####:  871:	  drawCard(currentPlayer, state);
    #####:  872:	  drawCard(currentPlayer, state);
        -:  873:	}
    #####:  874:      else if (choice1 == 2)
        -:  875:	{
        -:  876:	  //+2 coins
    #####:  877:	  state->coins = state->coins + 2;
        -:  878:	}
        -:  879:      else
        -:  880:	{
        -:  881:	  //trash 2 cards in hand
    #####:  882:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  883:	  discardCard(choice3, currentPlayer, state, 1);
        -:  884:	}
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case tribute:
    #####:  891:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  892:	if (state->deckCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	  state->deckCount[nextPlayer]--;
        -:  895:	}
    #####:  896:	else if (state->discardCount[nextPlayer] > 0){
    #####:  897:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  898:	  state->discardCount[nextPlayer]--;
        -:  899:	}
        -:  900:	else{
        -:  901:	  //No Card to Reveal
        -:  902:	  if (DEBUG){
        -:  903:	    printf("No cards to reveal\n");
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:	    
        -:  908:      else{
    #####:  909:	if (state->deckCount[nextPlayer] == 0){
    #####:  910:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  911:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  912:	    state->deckCount[nextPlayer]++;
    #####:  913:	    state->discard[nextPlayer][i] = -1;
    #####:  914:	    state->discardCount[nextPlayer]--;
        -:  915:	  }
        -:  916:			    
    #####:  917:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  918:	} 
    #####:  919:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
    #####:  922:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
        -:  925:      }    
        -:  926:		       
    #####:  927:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  928:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  929:	state->playedCardCount++;
    #####:  930:	tributeRevealedCards[1] = -1;
        -:  931:      }
        -:  932:
    #####:  933:      for (i = 0; i <= 2; i ++){
    #####:  934:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  935:	  state->coins += 2;
        -:  936:	}
        -:  937:		    
    #####:  938:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  939:	  drawCard(currentPlayer, state);
    #####:  940:	  drawCard(currentPlayer, state);
        -:  941:	}
        -:  942:	else{//Action Card
    #####:  943:	  state->numActions = state->numActions + 2;
        -:  944:	}
        -:  945:      }
        -:  946:	    
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case ambassador:
    #####:  950:      j = 0;		//used to check if player has enough cards to discard
        -:  951:
    #####:  952:      if (choice2 > 2 || choice2 < 0)
        -:  953:	{
    #####:  954:	  return -1;				
        -:  955:	}
        -:  956:
    #####:  957:      if (choice1 == handPos)
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  963:	{
    #####:  964:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  965:	    {
    #####:  966:	      j++;
        -:  967:	    }
        -:  968:	}
    #####:  969:      if (j < choice2)
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
        -:  974:      if (DEBUG) 
        -:  975:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  976:
        -:  977:      //increase supply count for choosen card by amount being discarded
    #####:  978:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  979:			
        -:  980:      //each other player gains a copy of revealed card
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
        -:  984:	    {
    #####:  985:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  986:	    }
        -:  987:	}
        -:  988:
        -:  989:      //discard played card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);			
        -:  991:
        -:  992:      //trash copies of cards returned to supply
    #####:  993:      for (j = 0; j < choice2; j++)
        -:  994:	{
    #####:  995:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:	    {
    #####:  997:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  998:		{
    #####:  999:		  discardCard(i, currentPlayer, state, 1);
    #####: 1000:		  break;
        -: 1001:		}
        -: 1002:	    }
        -: 1003:	}			
        -: 1004:
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case cutpurse:
        -: 1008:
    #####: 1009:      updateCoins(currentPlayer, state, 2);
    #####: 1010:      for (i = 0; i < state->numPlayers; i++)
        -: 1011:	{
    #####: 1012:	  if (i != currentPlayer)
        -: 1013:	    {
    #####: 1014:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1015:		{
    #####: 1016:		  if (state->hand[i][j] == copper)
        -: 1017:		    {
    #####: 1018:		      discardCard(j, i, state, 0);
    #####: 1019:		      break;
        -: 1020:		    }
    #####: 1021:		  if (j == state->handCount[i])
        -: 1022:		    {
    #####: 1023:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1024:			{
        -: 1025:			  if (DEBUG)
        -: 1026:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1027:			}	
    #####: 1028:		      break;
        -: 1029:		    }		
        -: 1030:		}
        -: 1031:					
        -: 1032:	    }
        -: 1033:				
        -: 1034:	}				
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1038:
    #####: 1039:      return 0;
        -: 1040:
        -: 1041:		
        -: 1042:    case embargo: 
        -: 1043:      //+2 Coins
    #####: 1044:      state->coins = state->coins + 2;
        -: 1045:			
        -: 1046:      //see if selected pile is in play
    #####: 1047:      if ( state->supplyCount[choice1] == -1 )
        -: 1048:	{
    #####: 1049:	  return -1;
        -: 1050:	}
        -: 1051:			
        -: 1052:      //add embargo token to selected supply pile
    #####: 1053:      state->embargoTokens[choice1]++;
        -: 1054:			
        -: 1055:      //trash card
    #####: 1056:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case outpost:
        -: 1060:      //set outpost flag
    #####: 1061:      state->outpostPlayed++;
        -: 1062:			
        -: 1063:      //discard card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case salvager:
        -: 1068:      //+1 buy
    #####: 1069:      state->numBuys++;
        -: 1070:			
    #####: 1071:      if (choice1)
        -: 1072:	{
        -: 1073:	  //gain coins equal to trashed card
    #####: 1074:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1075:	  //trash card
    #####: 1076:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1077:	}
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case sea_hag:
    #####: 1084:      for (i = 0; i < state->numPlayers; i++){
    #####: 1085:	if (i != currentPlayer){
    #####: 1086:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1087:	  state->discardCount[i]++;
    #####: 1088:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1089:	}
        -: 1090:      }
    #####: 1091:      return 0;
        -: 1092:		
        -: 1093:    case treasure_map:
        -: 1094:      //search hand for another treasure_map
    #####: 1095:      index = -1;
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	{
    #####: 1098:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1099:	    {
    #####: 1100:	      index = i;
    #####: 1101:	      break;
        -: 1102:	    }
        -: 1103:	}
    #####: 1104:      if (index > -1)
        -: 1105:	{
        -: 1106:	  //trash both treasure cards
    #####: 1107:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1108:	  discardCard(index, currentPlayer, state, 1);
        -: 1109:
        -: 1110:	  //gain 4 Gold cards
    #####: 1111:	  for (i = 0; i < 4; i++)
        -: 1112:	    {
    #####: 1113:	      gainCard(gold, state, 1, currentPlayer);
        -: 1114:	    }
        -: 1115:				
        -: 1116:	  //return success
    #####: 1117:	  return 1;
        -: 1118:	}
        -: 1119:			
        -: 1120:      //no second treasure_map found in hand
    #####: 1121:      return -1;
        -: 1122:    }
        -: 1123:	
    #####: 1124:  return -1;
        -: 1125:}
        -: 1126:
      206: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1128:{
        -: 1129:	
        -: 1130:  //if card is not trashed, added to Played pile 
      206: 1131:  if (trashFlag < 1)
        -: 1132:    {
        -: 1133:      //add card to played pile
      204: 1134:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      204: 1135:      state->playedCardCount++;
        -: 1136:    }
        -: 1137:	
        -: 1138:  //set played card to -1
      206: 1139:  state->hand[currentPlayer][handPos] = -1;
        -: 1140:	
        -: 1141:  //remove card from player's hand
      206: 1142:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
       11: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
      195: 1147:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
    #####: 1150:      state->handCount[currentPlayer]--;
        -: 1151:    }
        -: 1152:  else 	
        -: 1153:    {
        -: 1154:      //replace discarded card with last card in hand
      195: 1155:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:      //set last card to -1
      195: 1157:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:      //reduce number of cards in hand
      195: 1159:      state->handCount[currentPlayer]--;
        -: 1160:    }
        -: 1161:	
      206: 1162:  return 0;
        -: 1163:}
        -: 1164:
     2704: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1166:{
        -: 1167:  //Note: supplyPos is enum of choosen card
        -: 1168:	
        -: 1169:  //check if supply pile is empty (0) or card is not used in game (-1)
     2704: 1170:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1171:    {
        4: 1172:      return -1;
        -: 1173:    }
        -: 1174:	
        -: 1175:  //added card for [whoseTurn] current player:
        -: 1176:  // toFlag = 0 : add to discard
        -: 1177:  // toFlag = 1 : add to deck
        -: 1178:  // toFlag = 2 : add to hand
        -: 1179:
     2700: 1180:  if (toFlag == 1)
        -: 1181:    {
     2700: 1182:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     2700: 1183:      state->deckCount[player]++;
        -: 1184:    }
    #####: 1185:  else if (toFlag == 2)
        -: 1186:    {
    #####: 1187:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1188:      state->handCount[player]++;
        -: 1189:    }
        -: 1190:  else
        -: 1191:    {
    #####: 1192:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1193:      state->discardCount[player]++;
        -: 1194:    }
        -: 1195:	
        -: 1196:  //decrease number in supply pile
     2700: 1197:  state->supplyCount[supplyPos]--;
        -: 1198:	 
     2700: 1199:  return 0;
        -: 1200:}
        -: 1201:
      318: 1202:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1203:{
        -: 1204:  int i;
        -: 1205:	
        -: 1206:  //reset coin count
      318: 1207:  state->coins = 0;
        -: 1208:
        -: 1209:  //add coins for each Treasure card in player's hand
     1888: 1210:  for (i = 0; i < state->handCount[player]; i++)
        -: 1211:    {
     1570: 1212:      if (state->hand[player][i] == copper)
        -: 1213:	{
     1241: 1214:	  state->coins += 1;
        -: 1215:	}
      329: 1216:      else if (state->hand[player][i] == silver)
        -: 1217:	{
    #####: 1218:	  state->coins += 2;
        -: 1219:	}
      329: 1220:      else if (state->hand[player][i] == gold)
        -: 1221:	{
    #####: 1222:	  state->coins += 3;
        -: 1223:	}	
        -: 1224:    }	
        -: 1225:
        -: 1226:  //add bonus
      318: 1227:  state->coins += bonus;
        -: 1228:
      318: 1229:  return 0;
        -: 1230:}
        -: 1231:
      102: 1232:void adventurerCardEffect(int drawntreasure, int temphand[], int z, int currentPlayer, struct gameState *state){
      856: 1233:  while(drawntreasure<2){
      652: 1234:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1235:      shuffle(currentPlayer, state);
        -: 1236:    }
      652: 1237:    drawCard(currentPlayer, state);
      652: 1238:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      652: 1239:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      204: 1240:      drawntreasure++;
        -: 1241:    else{
      448: 1242:      temphand[z]=cardDrawn;
      448: 1243:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      448: 1244:      z++;
        -: 1245:    }
        -: 1246:  }
      652: 1247:  while(z-1>=0){
      448: 1248:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      448: 1249:    z=z-1;
        -: 1250:  }
      102: 1251:}
        -: 1252:
    #####: 1253:void feastCardEffect(int choice1, int temphand[], int currentPlayer, struct gameState *state, int handPos){
        -: 1254:  int i;
    #####: 1255:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1256:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1257:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1258:  }
        -: 1259:  //Backup hand
        -: 1260:  
        -: 1261:  //Update Coins for Buy
    #####: 1262:  updateCoins(currentPlayer, state, 5);
    #####: 1263:  int x = 1;//Condition to loop on
    #####: 1264:  while( x == 1) {//Buy one card
    #####: 1265:    if (supplyCount(choice1, state) <= 0){
        -: 1266:      if (DEBUG)
        -: 1267:        printf("None of that card left, sorry!\n");
        -: 1268:
        -: 1269:      if (DEBUG)
        -: 1270:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1271:    }
    #####: 1272:    else if (state->coins < getCost(choice1)){
    #####: 1273:      printf("That card is too expensive!\n");
        -: 1274:
        -: 1275:      if (DEBUG){
        -: 1276:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1277:      }
        -: 1278:    }
        -: 1279:    else{
        -: 1280:
        -: 1281:      if (DEBUG){
        -: 1282:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1283:      }
        -: 1284:
    #####: 1285:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1286:      x = 0;//No more buying cards
        -: 1287:
        -: 1288:      if (DEBUG){
        -: 1289:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1290:      }
        -: 1291:
        -: 1292:    }
        -: 1293:  }     
        -: 1294:
        -: 1295:  //Reset Hand
    #####: 1296:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1297:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1298:    temphand[i] = -1;
        -: 1299:  }
    #####: 1300:} 
        -: 1301:
        -: 1302:
        1: 1303:void council_roomCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1304:  int i;
        -: 1305:  //+4 Cards
        5: 1306:  for (i = 0; i < 4; i++){
        4: 1307:    drawCard(currentPlayer, state);
        -: 1308:  }
        -: 1309:      
        -: 1310:  //+1 Buy
        1: 1311:  state->numBuys++;
        -: 1312:      
        -: 1313:  //Each other player draws a card
        5: 1314:  for (i = 0; i < state->numPlayers; i++){
        4: 1315:    if ( i != currentPlayer )
        -: 1316:    {
        3: 1317:      drawCard(i, state);
        -: 1318:    }
        -: 1319:  }
        -: 1320:      
        -: 1321:  //put played card in played card pile
        1: 1322:  discardCard(handPos, currentPlayer, state, 0);
        1: 1323:}
        -: 1324:
      102: 1325:void smithyCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1326:  int i;
      408: 1327:  for (i = 0; i < 3; i++)
        -: 1328:  {
      306: 1329:    drawCard(currentPlayer, state);
        -: 1330:  }
        -: 1331:      
        -: 1332:  //discard card from hand
      102: 1333:  discardCard(handPos, currentPlayer, state, 0);
      102: 1334:}
        -: 1335:
      101: 1336:void villageCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1337:  //+1 Card
      101: 1338:  drawCard(currentPlayer, state);
        -: 1339:      
        -: 1340:  //+2 Actions
      101: 1341:  state->numActions = state->numActions + 2;
        -: 1342:      
        -: 1343:  //discard played card from hand
      101: 1344:  discardCard(handPos, currentPlayer, state, 0);
      101: 1345:}
        -: 1346:
        -: 1347://end of dominion.c
        -: 1348:
Testing village:
1 card drawn? Comparing 5 to 5... TEST PASSED
Which card was drawn? Comparing 4 to 4... TEST PASSED
Actions increased by 2? Comparing 3 to 3... TEST PASSED
File 'dominion.c'
Lines executed:34.28% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:19
        -:    0:Programs:19
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    24775:    8:int compare(const void* a, const void* b) {
    24775:    9:  if (*(int*)a > *(int*)b)
     3041:   10:    return 1;
    21734:   11:  if (*(int*)a < *(int*)b)
     7962:   12:    return -1;
    13772:   13:  return 0;
        -:   14:}
        -:   15:
      313:   16:struct gameState* newGame() {
      313:   17:  struct gameState* g = malloc(sizeof(struct gameState));
      313:   18:  return g;
        -:   19:}
        -:   20:
      315:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
      315:   23:  int* k = malloc(10 * sizeof(int));
      315:   24:  k[0] = k1;
      315:   25:  k[1] = k2;
      315:   26:  k[2] = k3;
      315:   27:  k[3] = k4;
      315:   28:  k[4] = k5;
      315:   29:  k[5] = k6;
      315:   30:  k[6] = k7;
      315:   31:  k[7] = k8;
      315:   32:  k[8] = k9;
      315:   33:  k[9] = k10;
      315:   34:  return k;
        -:   35:}
        -:   36:
      313:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      313:   44:  SelectStream(1);
      313:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      313:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      313:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3443:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    34430:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    31300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      313:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      313:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      313:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      313:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      313:   95:      state->supplyCount[estate] = 12;
      313:   96:      state->supplyCount[duchy] = 12;
      313:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      313:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      313:  102:  state->supplyCount[silver] = 40;
      313:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     6573:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    65730:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    60722:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1252:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      626:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      313:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      939:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1252:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    59470:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1565:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1252:  140:      state->deckCount[i] = 0;
     5008:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3756:  143:	  state->deck[i][j] = estate;
     3756:  144:	  state->deckCount[i]++;
        -:  145:	}
    10016:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     8764:  148:	  state->deck[i][j] = copper;
     8764:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1565:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1252:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1565:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1252:  166:      state->handCount[i] = 0;
     1252:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     8764:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     8451:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      313:  182:  state->outpostPlayed = 0;
      313:  183:  state->phase = 0;
      313:  184:  state->numActions = 1;
      313:  185:  state->numBuys = 1;
      313:  186:  state->playedCardCount = 0;
      313:  187:  state->whoseTurn = 0;
      313:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1878:  192:  for (it = 0; it < 5; it++){
     1565:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      313:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      313:  198:  return 0;
        -:  199:}
        -:  200:
     1254:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1254:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1254:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1254:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15837:  214:  while (state->deckCount[player] > 0) {
    13329:  215:    card = floor(Random() * state->deckCount[player]);
    13329:  216:    newDeck[newDeckPos] = state->deck[player][card];
    13329:  217:    newDeckPos++;
   123439:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   110110:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    13329:  221:    state->deckCount[player]--;
        -:  222:  }
    14583:  223:  for (i = 0; i < newDeckPos; i++) {
    13329:  224:    state->deck[player][i] = newDeck[i];
    13329:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1254:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     2704:  320:int supplyCount(int card, struct gameState *state) {
     2704:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      307:  346:int whoseTurn(struct gameState *state) {
      307:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     4632:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     4632:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      811:  533:    for (i = 0; i < state->discardCount[player];i++){
      809:  534:      state->deck[player][i] = state->discard[player][i];
      809:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     4630:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     4630:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     4630:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     4630:  576:    state->deckCount[player]--;
     4630:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     4632:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      307:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      307:  653:  int currentPlayer = whoseTurn(state);
      307:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      307:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      307:  658:  int drawntreasure=0;
        -:  659:  //int cardDrawn;
      307:  660:  int z = 0;// this is the counter for the temp hand
      307:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
      307:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
      102:  670:      adventurerCardEffect(drawntreasure, temphand, z, currentPlayer, state);
      102:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
        1:  674:      council_roomCardEffect(currentPlayer, state, handPos);
        1:  675:      return 0;
        -:  676:			
        -:  677:    case feast:
    #####:  678:      feastCardEffect(choice1, temphand, currentPlayer, state, handPos);
    #####:  679:      return 0;
        -:  680:			
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
        -:  741:
        -:  742:
    #####:  743:      return 0;
        -:  744:		
        -:  745:    case smithy:
        -:  746:      //+3 Cards
      102:  747:      smithyCardEffect(currentPlayer,state,handPos);
      102:  748:      return 0;
        -:  749:		
        -:  750:    case village:
      102:  751:      villageCardEffect(currentPlayer,state,handPos);
      102:  752:      return 0;
        -:  753:		
        -:  754:    case baron:
    #####:  755:      state->numBuys++;//Increase buys by 1!
    #####:  756:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  757:	int p = 0;//Iterator for hand!
    #####:  758:	int card_not_discarded = 1;//Flag for discard set!
    #####:  759:	while(card_not_discarded){
    #####:  760:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  761:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  762:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  763:	    state->discardCount[currentPlayer]++;
    #####:  764:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  765:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  766:	    }
    #####:  767:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  768:	    state->handCount[currentPlayer]--;
    #####:  769:	    card_not_discarded = 0;//Exit the loop
        -:  770:	  }
    #####:  771:	  else if (p > state->handCount[currentPlayer]){
        -:  772:	    if(DEBUG) {
        -:  773:	      printf("No estate cards in your hand, invalid choice\n");
        -:  774:	      printf("Must gain an estate if there are any\n");
        -:  775:	    }
    #####:  776:	    if (supplyCount(estate, state) > 0){
    #####:  777:	      gainCard(estate, state, 0, currentPlayer);
    #####:  778:	      state->supplyCount[estate]--;//Decrement estates
    #####:  779:	      if (supplyCount(estate, state) == 0){
    #####:  780:		isGameOver(state);
        -:  781:	      }
        -:  782:	    }
    #####:  783:	    card_not_discarded = 0;//Exit the loop
        -:  784:	  }
        -:  785:			    
        -:  786:	  else{
    #####:  787:	    p++;//Next card
        -:  788:	  }
        -:  789:	}
        -:  790:      }
        -:  791:			    
        -:  792:      else{
    #####:  793:	if (supplyCount(estate, state) > 0){
    #####:  794:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  795:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  796:	  if (supplyCount(estate, state) == 0){
    #####:  797:	    isGameOver(state);
        -:  798:	  }
        -:  799:	}
        -:  800:      }
        -:  801:	    
        -:  802:      
    #####:  803:      return 0;
        -:  804:		
        -:  805:    case great_hall:
        -:  806:      //+1 Card
    #####:  807:      drawCard(currentPlayer, state);
        -:  808:			
        -:  809:      //+1 Actions
    #####:  810:      state->numActions++;
        -:  811:			
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
    #####:  814:      return 0;
        -:  815:		
        -:  816:    case minion:
        -:  817:      //+1 action
    #####:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
        -:  822:			
    #####:  823:      if (choice1)		//+2 coins
        -:  824:	{
    #####:  825:	  state->coins = state->coins + 2;
        -:  826:	}
        -:  827:			
    #####:  828:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  829:	{
        -:  830:	  //discard hand
    #####:  831:	  while(numHandCards(state) > 0)
        -:  832:	    {
    #####:  833:	      discardCard(handPos, currentPlayer, state, 0);
        -:  834:	    }
        -:  835:				
        -:  836:	  //draw 4
    #####:  837:	  for (i = 0; i < 4; i++)
        -:  838:	    {
    #####:  839:	      drawCard(currentPlayer, state);
        -:  840:	    }
        -:  841:				
        -:  842:	  //other players discard hand and redraw if hand size > 4
    #####:  843:	  for (i = 0; i < state->numPlayers; i++)
        -:  844:	    {
    #####:  845:	      if (i != currentPlayer)
        -:  846:		{
    #####:  847:		  if ( state->handCount[i] > 4 )
        -:  848:		    {
        -:  849:		      //discard hand
    #####:  850:		      while( state->handCount[i] > 0 )
        -:  851:			{
    #####:  852:			  discardCard(handPos, i, state, 0);
        -:  853:			}
        -:  854:							
        -:  855:		      //draw 4
    #####:  856:		      for (j = 0; j < 4; j++)
        -:  857:			{
    #####:  858:			  drawCard(i, state);
        -:  859:			}
        -:  860:		    }
        -:  861:		}
        -:  862:	    }
        -:  863:				
        -:  864:	}
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case steward:
    #####:  868:      if (choice1 == 1)
        -:  869:	{
        -:  870:	  //+2 cards
    #####:  871:	  drawCard(currentPlayer, state);
    #####:  872:	  drawCard(currentPlayer, state);
        -:  873:	}
    #####:  874:      else if (choice1 == 2)
        -:  875:	{
        -:  876:	  //+2 coins
    #####:  877:	  state->coins = state->coins + 2;
        -:  878:	}
        -:  879:      else
        -:  880:	{
        -:  881:	  //trash 2 cards in hand
    #####:  882:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  883:	  discardCard(choice3, currentPlayer, state, 1);
        -:  884:	}
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case tribute:
    #####:  891:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  892:	if (state->deckCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	  state->deckCount[nextPlayer]--;
        -:  895:	}
    #####:  896:	else if (state->discardCount[nextPlayer] > 0){
    #####:  897:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  898:	  state->discardCount[nextPlayer]--;
        -:  899:	}
        -:  900:	else{
        -:  901:	  //No Card to Reveal
        -:  902:	  if (DEBUG){
        -:  903:	    printf("No cards to reveal\n");
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:	    
        -:  908:      else{
    #####:  909:	if (state->deckCount[nextPlayer] == 0){
    #####:  910:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  911:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  912:	    state->deckCount[nextPlayer]++;
    #####:  913:	    state->discard[nextPlayer][i] = -1;
    #####:  914:	    state->discardCount[nextPlayer]--;
        -:  915:	  }
        -:  916:			    
    #####:  917:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  918:	} 
    #####:  919:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
    #####:  922:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
        -:  925:      }    
        -:  926:		       
    #####:  927:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  928:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  929:	state->playedCardCount++;
    #####:  930:	tributeRevealedCards[1] = -1;
        -:  931:      }
        -:  932:
    #####:  933:      for (i = 0; i <= 2; i ++){
    #####:  934:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  935:	  state->coins += 2;
        -:  936:	}
        -:  937:		    
    #####:  938:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  939:	  drawCard(currentPlayer, state);
    #####:  940:	  drawCard(currentPlayer, state);
        -:  941:	}
        -:  942:	else{//Action Card
    #####:  943:	  state->numActions = state->numActions + 2;
        -:  944:	}
        -:  945:      }
        -:  946:	    
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case ambassador:
    #####:  950:      j = 0;		//used to check if player has enough cards to discard
        -:  951:
    #####:  952:      if (choice2 > 2 || choice2 < 0)
        -:  953:	{
    #####:  954:	  return -1;				
        -:  955:	}
        -:  956:
    #####:  957:      if (choice1 == handPos)
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  963:	{
    #####:  964:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  965:	    {
    #####:  966:	      j++;
        -:  967:	    }
        -:  968:	}
    #####:  969:      if (j < choice2)
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
        -:  974:      if (DEBUG) 
        -:  975:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  976:
        -:  977:      //increase supply count for choosen card by amount being discarded
    #####:  978:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  979:			
        -:  980:      //each other player gains a copy of revealed card
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
        -:  984:	    {
    #####:  985:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  986:	    }
        -:  987:	}
        -:  988:
        -:  989:      //discard played card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);			
        -:  991:
        -:  992:      //trash copies of cards returned to supply
    #####:  993:      for (j = 0; j < choice2; j++)
        -:  994:	{
    #####:  995:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:	    {
    #####:  997:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  998:		{
    #####:  999:		  discardCard(i, currentPlayer, state, 1);
    #####: 1000:		  break;
        -: 1001:		}
        -: 1002:	    }
        -: 1003:	}			
        -: 1004:
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case cutpurse:
        -: 1008:
    #####: 1009:      updateCoins(currentPlayer, state, 2);
    #####: 1010:      for (i = 0; i < state->numPlayers; i++)
        -: 1011:	{
    #####: 1012:	  if (i != currentPlayer)
        -: 1013:	    {
    #####: 1014:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1015:		{
    #####: 1016:		  if (state->hand[i][j] == copper)
        -: 1017:		    {
    #####: 1018:		      discardCard(j, i, state, 0);
    #####: 1019:		      break;
        -: 1020:		    }
    #####: 1021:		  if (j == state->handCount[i])
        -: 1022:		    {
    #####: 1023:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1024:			{
        -: 1025:			  if (DEBUG)
        -: 1026:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1027:			}	
    #####: 1028:		      break;
        -: 1029:		    }		
        -: 1030:		}
        -: 1031:					
        -: 1032:	    }
        -: 1033:				
        -: 1034:	}				
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1038:
    #####: 1039:      return 0;
        -: 1040:
        -: 1041:		
        -: 1042:    case embargo: 
        -: 1043:      //+2 Coins
    #####: 1044:      state->coins = state->coins + 2;
        -: 1045:			
        -: 1046:      //see if selected pile is in play
    #####: 1047:      if ( state->supplyCount[choice1] == -1 )
        -: 1048:	{
    #####: 1049:	  return -1;
        -: 1050:	}
        -: 1051:			
        -: 1052:      //add embargo token to selected supply pile
    #####: 1053:      state->embargoTokens[choice1]++;
        -: 1054:			
        -: 1055:      //trash card
    #####: 1056:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case outpost:
        -: 1060:      //set outpost flag
    #####: 1061:      state->outpostPlayed++;
        -: 1062:			
        -: 1063:      //discard card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case salvager:
        -: 1068:      //+1 buy
    #####: 1069:      state->numBuys++;
        -: 1070:			
    #####: 1071:      if (choice1)
        -: 1072:	{
        -: 1073:	  //gain coins equal to trashed card
    #####: 1074:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1075:	  //trash card
    #####: 1076:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1077:	}
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case sea_hag:
    #####: 1084:      for (i = 0; i < state->numPlayers; i++){
    #####: 1085:	if (i != currentPlayer){
    #####: 1086:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1087:	  state->discardCount[i]++;
    #####: 1088:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1089:	}
        -: 1090:      }
    #####: 1091:      return 0;
        -: 1092:		
        -: 1093:    case treasure_map:
        -: 1094:      //search hand for another treasure_map
    #####: 1095:      index = -1;
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	{
    #####: 1098:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1099:	    {
    #####: 1100:	      index = i;
    #####: 1101:	      break;
        -: 1102:	    }
        -: 1103:	}
    #####: 1104:      if (index > -1)
        -: 1105:	{
        -: 1106:	  //trash both treasure cards
    #####: 1107:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1108:	  discardCard(index, currentPlayer, state, 1);
        -: 1109:
        -: 1110:	  //gain 4 Gold cards
    #####: 1111:	  for (i = 0; i < 4; i++)
        -: 1112:	    {
    #####: 1113:	      gainCard(gold, state, 1, currentPlayer);
        -: 1114:	    }
        -: 1115:				
        -: 1116:	  //return success
    #####: 1117:	  return 1;
        -: 1118:	}
        -: 1119:			
        -: 1120:      //no second treasure_map found in hand
    #####: 1121:      return -1;
        -: 1122:    }
        -: 1123:	
    #####: 1124:  return -1;
        -: 1125:}
        -: 1126:
      207: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1128:{
        -: 1129:	
        -: 1130:  //if card is not trashed, added to Played pile 
      207: 1131:  if (trashFlag < 1)
        -: 1132:    {
        -: 1133:      //add card to played pile
      205: 1134:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      205: 1135:      state->playedCardCount++;
        -: 1136:    }
        -: 1137:	
        -: 1138:  //set played card to -1
      207: 1139:  state->hand[currentPlayer][handPos] = -1;
        -: 1140:	
        -: 1141:  //remove card from player's hand
      207: 1142:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
       11: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
      196: 1147:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
    #####: 1150:      state->handCount[currentPlayer]--;
        -: 1151:    }
        -: 1152:  else 	
        -: 1153:    {
        -: 1154:      //replace discarded card with last card in hand
      196: 1155:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:      //set last card to -1
      196: 1157:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:      //reduce number of cards in hand
      196: 1159:      state->handCount[currentPlayer]--;
        -: 1160:    }
        -: 1161:	
      207: 1162:  return 0;
        -: 1163:}
        -: 1164:
     2704: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1166:{
        -: 1167:  //Note: supplyPos is enum of choosen card
        -: 1168:	
        -: 1169:  //check if supply pile is empty (0) or card is not used in game (-1)
     2704: 1170:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1171:    {
        4: 1172:      return -1;
        -: 1173:    }
        -: 1174:	
        -: 1175:  //added card for [whoseTurn] current player:
        -: 1176:  // toFlag = 0 : add to discard
        -: 1177:  // toFlag = 1 : add to deck
        -: 1178:  // toFlag = 2 : add to hand
        -: 1179:
     2700: 1180:  if (toFlag == 1)
        -: 1181:    {
     2700: 1182:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     2700: 1183:      state->deckCount[player]++;
        -: 1184:    }
    #####: 1185:  else if (toFlag == 2)
        -: 1186:    {
    #####: 1187:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1188:      state->handCount[player]++;
        -: 1189:    }
        -: 1190:  else
        -: 1191:    {
    #####: 1192:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1193:      state->discardCount[player]++;
        -: 1194:    }
        -: 1195:	
        -: 1196:  //decrease number in supply pile
     2700: 1197:  state->supplyCount[supplyPos]--;
        -: 1198:	 
     2700: 1199:  return 0;
        -: 1200:}
        -: 1201:
      319: 1202:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1203:{
        -: 1204:  int i;
        -: 1205:	
        -: 1206:  //reset coin count
      319: 1207:  state->coins = 0;
        -: 1208:
        -: 1209:  //add coins for each Treasure card in player's hand
     1894: 1210:  for (i = 0; i < state->handCount[player]; i++)
        -: 1211:    {
     1575: 1212:      if (state->hand[player][i] == copper)
        -: 1213:	{
     1245: 1214:	  state->coins += 1;
        -: 1215:	}
      330: 1216:      else if (state->hand[player][i] == silver)
        -: 1217:	{
    #####: 1218:	  state->coins += 2;
        -: 1219:	}
      330: 1220:      else if (state->hand[player][i] == gold)
        -: 1221:	{
    #####: 1222:	  state->coins += 3;
        -: 1223:	}	
        -: 1224:    }	
        -: 1225:
        -: 1226:  //add bonus
      319: 1227:  state->coins += bonus;
        -: 1228:
      319: 1229:  return 0;
        -: 1230:}
        -: 1231:
      102: 1232:void adventurerCardEffect(int drawntreasure, int temphand[], int z, int currentPlayer, struct gameState *state){
      856: 1233:  while(drawntreasure<2){
      652: 1234:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1235:      shuffle(currentPlayer, state);
        -: 1236:    }
      652: 1237:    drawCard(currentPlayer, state);
      652: 1238:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      652: 1239:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      204: 1240:      drawntreasure++;
        -: 1241:    else{
      448: 1242:      temphand[z]=cardDrawn;
      448: 1243:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      448: 1244:      z++;
        -: 1245:    }
        -: 1246:  }
      652: 1247:  while(z-1>=0){
      448: 1248:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      448: 1249:    z=z-1;
        -: 1250:  }
      102: 1251:}
        -: 1252:
    #####: 1253:void feastCardEffect(int choice1, int temphand[], int currentPlayer, struct gameState *state, int handPos){
        -: 1254:  int i;
    #####: 1255:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1256:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1257:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1258:  }
        -: 1259:  //Backup hand
        -: 1260:  
        -: 1261:  //Update Coins for Buy
    #####: 1262:  updateCoins(currentPlayer, state, 5);
    #####: 1263:  int x = 1;//Condition to loop on
    #####: 1264:  while( x == 1) {//Buy one card
    #####: 1265:    if (supplyCount(choice1, state) <= 0){
        -: 1266:      if (DEBUG)
        -: 1267:        printf("None of that card left, sorry!\n");
        -: 1268:
        -: 1269:      if (DEBUG)
        -: 1270:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1271:    }
    #####: 1272:    else if (state->coins < getCost(choice1)){
    #####: 1273:      printf("That card is too expensive!\n");
        -: 1274:
        -: 1275:      if (DEBUG){
        -: 1276:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1277:      }
        -: 1278:    }
        -: 1279:    else{
        -: 1280:
        -: 1281:      if (DEBUG){
        -: 1282:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1283:      }
        -: 1284:
    #####: 1285:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1286:      x = 0;//No more buying cards
        -: 1287:
        -: 1288:      if (DEBUG){
        -: 1289:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1290:      }
        -: 1291:
        -: 1292:    }
        -: 1293:  }     
        -: 1294:
        -: 1295:  //Reset Hand
    #####: 1296:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1297:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1298:    temphand[i] = -1;
        -: 1299:  }
    #####: 1300:} 
        -: 1301:
        -: 1302:
        1: 1303:void council_roomCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1304:  int i;
        -: 1305:  //+4 Cards
        5: 1306:  for (i = 0; i < 4; i++){
        4: 1307:    drawCard(currentPlayer, state);
        -: 1308:  }
        -: 1309:      
        -: 1310:  //+1 Buy
        1: 1311:  state->numBuys++;
        -: 1312:      
        -: 1313:  //Each other player draws a card
        5: 1314:  for (i = 0; i < state->numPlayers; i++){
        4: 1315:    if ( i != currentPlayer )
        -: 1316:    {
        3: 1317:      drawCard(i, state);
        -: 1318:    }
        -: 1319:  }
        -: 1320:      
        -: 1321:  //put played card in played card pile
        1: 1322:  discardCard(handPos, currentPlayer, state, 0);
        1: 1323:}
        -: 1324:
      102: 1325:void smithyCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1326:  int i;
      408: 1327:  for (i = 0; i < 3; i++)
        -: 1328:  {
      306: 1329:    drawCard(currentPlayer, state);
        -: 1330:  }
        -: 1331:      
        -: 1332:  //discard card from hand
      102: 1333:  discardCard(handPos, currentPlayer, state, 0);
      102: 1334:}
        -: 1335:
      102: 1336:void villageCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1337:  //+1 Card
      102: 1338:  drawCard(currentPlayer, state);
        -: 1339:      
        -: 1340:  //+2 Actions
      102: 1341:  state->numActions = state->numActions + 2;
        -: 1342:      
        -: 1343:  //discard played card from hand
      102: 1344:  discardCard(handPos, currentPlayer, state, 0);
      102: 1345:}
        -: 1346:
        -: 1347://end of dominion.c
        -: 1348:
Testing council room:
4 card drawn (-1 for discard)? Comparing 8 to 8... TEST PASSED
Buys increased? Comparing 2 to 2... TEST PASSED
Everyone else draws card? 
Comparing 1 to 1... TEST PASSED
Comparing 1 to 1... TEST PASSED
Comparing 1 to 1... TEST PASSED
File 'dominion.c'
Lines executed:34.28% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:20
        -:    0:Programs:20
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    24835:    8:int compare(const void* a, const void* b) {
    24835:    9:  if (*(int*)a > *(int*)b)
     3041:   10:    return 1;
    21794:   11:  if (*(int*)a < *(int*)b)
     7978:   12:    return -1;
    13816:   13:  return 0;
        -:   14:}
        -:   15:
      314:   16:struct gameState* newGame() {
      314:   17:  struct gameState* g = malloc(sizeof(struct gameState));
      314:   18:  return g;
        -:   19:}
        -:   20:
      316:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
      316:   23:  int* k = malloc(10 * sizeof(int));
      316:   24:  k[0] = k1;
      316:   25:  k[1] = k2;
      316:   26:  k[2] = k3;
      316:   27:  k[3] = k4;
      316:   28:  k[4] = k5;
      316:   29:  k[5] = k6;
      316:   30:  k[6] = k7;
      316:   31:  k[7] = k8;
      316:   32:  k[8] = k9;
      316:   33:  k[9] = k10;
      316:   34:  return k;
        -:   35:}
        -:   36:
      314:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      314:   44:  SelectStream(1);
      314:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      314:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      314:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3454:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    34540:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    31400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      314:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      314:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      314:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      314:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      314:   95:      state->supplyCount[estate] = 12;
      314:   96:      state->supplyCount[duchy] = 12;
      314:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      314:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      314:  102:  state->supplyCount[silver] = 40;
      314:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     6594:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    65940:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    60916:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1256:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      628:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      314:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      942:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1256:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    59660:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1570:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1256:  140:      state->deckCount[i] = 0;
     5024:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3768:  143:	  state->deck[i][j] = estate;
     3768:  144:	  state->deckCount[i]++;
        -:  145:	}
    10048:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     8792:  148:	  state->deck[i][j] = copper;
     8792:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1570:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1256:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1570:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1256:  166:      state->handCount[i] = 0;
     1256:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     8792:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     8478:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      314:  182:  state->outpostPlayed = 0;
      314:  183:  state->phase = 0;
      314:  184:  state->numActions = 1;
      314:  185:  state->numBuys = 1;
      314:  186:  state->playedCardCount = 0;
      314:  187:  state->whoseTurn = 0;
      314:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1884:  192:  for (it = 0; it < 5; it++){
     1570:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      314:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      314:  198:  return 0;
        -:  199:}
        -:  200:
     1258:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1258:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1258:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1258:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15885:  214:  while (state->deckCount[player] > 0) {
    13369:  215:    card = floor(Random() * state->deckCount[player]);
    13369:  216:    newDeck[newDeckPos] = state->deck[player][card];
    13369:  217:    newDeckPos++;
   123570:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   110201:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    13369:  221:    state->deckCount[player]--;
        -:  222:  }
    14627:  223:  for (i = 0; i < newDeckPos; i++) {
    13369:  224:    state->deck[player][i] = newDeck[i];
    13369:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1258:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     2704:  320:int supplyCount(int card, struct gameState *state) {
     2704:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      308:  346:int whoseTurn(struct gameState *state) {
      308:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     4644:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     4644:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      811:  533:    for (i = 0; i < state->discardCount[player];i++){
      809:  534:      state->deck[player][i] = state->discard[player][i];
      809:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     4642:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     4642:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     4642:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     4642:  576:    state->deckCount[player]--;
     4642:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     4644:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      308:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      308:  653:  int currentPlayer = whoseTurn(state);
      308:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      308:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      308:  658:  int drawntreasure=0;
        -:  659:  //int cardDrawn;
      308:  660:  int z = 0;// this is the counter for the temp hand
      308:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
      308:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
      102:  670:      adventurerCardEffect(drawntreasure, temphand, z, currentPlayer, state);
      102:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
        2:  674:      council_roomCardEffect(currentPlayer, state, handPos);
        2:  675:      return 0;
        -:  676:			
        -:  677:    case feast:
    #####:  678:      feastCardEffect(choice1, temphand, currentPlayer, state, handPos);
    #####:  679:      return 0;
        -:  680:			
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
    #####:  713:	      break;
        -:  714:	    }
        -:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
        -:  741:
        -:  742:
    #####:  743:      return 0;
        -:  744:		
        -:  745:    case smithy:
        -:  746:      //+3 Cards
      102:  747:      smithyCardEffect(currentPlayer,state,handPos);
      102:  748:      return 0;
        -:  749:		
        -:  750:    case village:
      102:  751:      villageCardEffect(currentPlayer,state,handPos);
      102:  752:      return 0;
        -:  753:		
        -:  754:    case baron:
    #####:  755:      state->numBuys++;//Increase buys by 1!
    #####:  756:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  757:	int p = 0;//Iterator for hand!
    #####:  758:	int card_not_discarded = 1;//Flag for discard set!
    #####:  759:	while(card_not_discarded){
    #####:  760:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  761:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  762:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  763:	    state->discardCount[currentPlayer]++;
    #####:  764:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  765:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  766:	    }
    #####:  767:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  768:	    state->handCount[currentPlayer]--;
    #####:  769:	    card_not_discarded = 0;//Exit the loop
        -:  770:	  }
    #####:  771:	  else if (p > state->handCount[currentPlayer]){
        -:  772:	    if(DEBUG) {
        -:  773:	      printf("No estate cards in your hand, invalid choice\n");
        -:  774:	      printf("Must gain an estate if there are any\n");
        -:  775:	    }
    #####:  776:	    if (supplyCount(estate, state) > 0){
    #####:  777:	      gainCard(estate, state, 0, currentPlayer);
    #####:  778:	      state->supplyCount[estate]--;//Decrement estates
    #####:  779:	      if (supplyCount(estate, state) == 0){
    #####:  780:		isGameOver(state);
        -:  781:	      }
        -:  782:	    }
    #####:  783:	    card_not_discarded = 0;//Exit the loop
        -:  784:	  }
        -:  785:			    
        -:  786:	  else{
    #####:  787:	    p++;//Next card
        -:  788:	  }
        -:  789:	}
        -:  790:      }
        -:  791:			    
        -:  792:      else{
    #####:  793:	if (supplyCount(estate, state) > 0){
    #####:  794:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  795:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  796:	  if (supplyCount(estate, state) == 0){
    #####:  797:	    isGameOver(state);
        -:  798:	  }
        -:  799:	}
        -:  800:      }
        -:  801:	    
        -:  802:      
    #####:  803:      return 0;
        -:  804:		
        -:  805:    case great_hall:
        -:  806:      //+1 Card
    #####:  807:      drawCard(currentPlayer, state);
        -:  808:			
        -:  809:      //+1 Actions
    #####:  810:      state->numActions++;
        -:  811:			
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
    #####:  814:      return 0;
        -:  815:		
        -:  816:    case minion:
        -:  817:      //+1 action
    #####:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
        -:  822:			
    #####:  823:      if (choice1)		//+2 coins
        -:  824:	{
    #####:  825:	  state->coins = state->coins + 2;
        -:  826:	}
        -:  827:			
    #####:  828:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  829:	{
        -:  830:	  //discard hand
    #####:  831:	  while(numHandCards(state) > 0)
        -:  832:	    {
    #####:  833:	      discardCard(handPos, currentPlayer, state, 0);
        -:  834:	    }
        -:  835:				
        -:  836:	  //draw 4
    #####:  837:	  for (i = 0; i < 4; i++)
        -:  838:	    {
    #####:  839:	      drawCard(currentPlayer, state);
        -:  840:	    }
        -:  841:				
        -:  842:	  //other players discard hand and redraw if hand size > 4
    #####:  843:	  for (i = 0; i < state->numPlayers; i++)
        -:  844:	    {
    #####:  845:	      if (i != currentPlayer)
        -:  846:		{
    #####:  847:		  if ( state->handCount[i] > 4 )
        -:  848:		    {
        -:  849:		      //discard hand
    #####:  850:		      while( state->handCount[i] > 0 )
        -:  851:			{
    #####:  852:			  discardCard(handPos, i, state, 0);
        -:  853:			}
        -:  854:							
        -:  855:		      //draw 4
    #####:  856:		      for (j = 0; j < 4; j++)
        -:  857:			{
    #####:  858:			  drawCard(i, state);
        -:  859:			}
        -:  860:		    }
        -:  861:		}
        -:  862:	    }
        -:  863:				
        -:  864:	}
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case steward:
    #####:  868:      if (choice1 == 1)
        -:  869:	{
        -:  870:	  //+2 cards
    #####:  871:	  drawCard(currentPlayer, state);
    #####:  872:	  drawCard(currentPlayer, state);
        -:  873:	}
    #####:  874:      else if (choice1 == 2)
        -:  875:	{
        -:  876:	  //+2 coins
    #####:  877:	  state->coins = state->coins + 2;
        -:  878:	}
        -:  879:      else
        -:  880:	{
        -:  881:	  //trash 2 cards in hand
    #####:  882:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  883:	  discardCard(choice3, currentPlayer, state, 1);
        -:  884:	}
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case tribute:
    #####:  891:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  892:	if (state->deckCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	  state->deckCount[nextPlayer]--;
        -:  895:	}
    #####:  896:	else if (state->discardCount[nextPlayer] > 0){
    #####:  897:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  898:	  state->discardCount[nextPlayer]--;
        -:  899:	}
        -:  900:	else{
        -:  901:	  //No Card to Reveal
        -:  902:	  if (DEBUG){
        -:  903:	    printf("No cards to reveal\n");
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:	    
        -:  908:      else{
    #####:  909:	if (state->deckCount[nextPlayer] == 0){
    #####:  910:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  911:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  912:	    state->deckCount[nextPlayer]++;
    #####:  913:	    state->discard[nextPlayer][i] = -1;
    #####:  914:	    state->discardCount[nextPlayer]--;
        -:  915:	  }
        -:  916:			    
    #####:  917:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  918:	} 
    #####:  919:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
    #####:  922:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
        -:  925:      }    
        -:  926:		       
    #####:  927:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  928:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  929:	state->playedCardCount++;
    #####:  930:	tributeRevealedCards[1] = -1;
        -:  931:      }
        -:  932:
    #####:  933:      for (i = 0; i <= 2; i ++){
    #####:  934:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  935:	  state->coins += 2;
        -:  936:	}
        -:  937:		    
    #####:  938:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  939:	  drawCard(currentPlayer, state);
    #####:  940:	  drawCard(currentPlayer, state);
        -:  941:	}
        -:  942:	else{//Action Card
    #####:  943:	  state->numActions = state->numActions + 2;
        -:  944:	}
        -:  945:      }
        -:  946:	    
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case ambassador:
    #####:  950:      j = 0;		//used to check if player has enough cards to discard
        -:  951:
    #####:  952:      if (choice2 > 2 || choice2 < 0)
        -:  953:	{
    #####:  954:	  return -1;				
        -:  955:	}
        -:  956:
    #####:  957:      if (choice1 == handPos)
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  963:	{
    #####:  964:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  965:	    {
    #####:  966:	      j++;
        -:  967:	    }
        -:  968:	}
    #####:  969:      if (j < choice2)
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
        -:  974:      if (DEBUG) 
        -:  975:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  976:
        -:  977:      //increase supply count for choosen card by amount being discarded
    #####:  978:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  979:			
        -:  980:      //each other player gains a copy of revealed card
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
        -:  984:	    {
    #####:  985:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  986:	    }
        -:  987:	}
        -:  988:
        -:  989:      //discard played card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);			
        -:  991:
        -:  992:      //trash copies of cards returned to supply
    #####:  993:      for (j = 0; j < choice2; j++)
        -:  994:	{
    #####:  995:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:	    {
    #####:  997:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  998:		{
    #####:  999:		  discardCard(i, currentPlayer, state, 1);
    #####: 1000:		  break;
        -: 1001:		}
        -: 1002:	    }
        -: 1003:	}			
        -: 1004:
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case cutpurse:
        -: 1008:
    #####: 1009:      updateCoins(currentPlayer, state, 2);
    #####: 1010:      for (i = 0; i < state->numPlayers; i++)
        -: 1011:	{
    #####: 1012:	  if (i != currentPlayer)
        -: 1013:	    {
    #####: 1014:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1015:		{
    #####: 1016:		  if (state->hand[i][j] == copper)
        -: 1017:		    {
    #####: 1018:		      discardCard(j, i, state, 0);
    #####: 1019:		      break;
        -: 1020:		    }
    #####: 1021:		  if (j == state->handCount[i])
        -: 1022:		    {
    #####: 1023:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1024:			{
        -: 1025:			  if (DEBUG)
        -: 1026:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1027:			}	
    #####: 1028:		      break;
        -: 1029:		    }		
        -: 1030:		}
        -: 1031:					
        -: 1032:	    }
        -: 1033:				
        -: 1034:	}				
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1038:
    #####: 1039:      return 0;
        -: 1040:
        -: 1041:		
        -: 1042:    case embargo: 
        -: 1043:      //+2 Coins
    #####: 1044:      state->coins = state->coins + 2;
        -: 1045:			
        -: 1046:      //see if selected pile is in play
    #####: 1047:      if ( state->supplyCount[choice1] == -1 )
        -: 1048:	{
    #####: 1049:	  return -1;
        -: 1050:	}
        -: 1051:			
        -: 1052:      //add embargo token to selected supply pile
    #####: 1053:      state->embargoTokens[choice1]++;
        -: 1054:			
        -: 1055:      //trash card
    #####: 1056:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case outpost:
        -: 1060:      //set outpost flag
    #####: 1061:      state->outpostPlayed++;
        -: 1062:			
        -: 1063:      //discard card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case salvager:
        -: 1068:      //+1 buy
    #####: 1069:      state->numBuys++;
        -: 1070:			
    #####: 1071:      if (choice1)
        -: 1072:	{
        -: 1073:	  //gain coins equal to trashed card
    #####: 1074:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1075:	  //trash card
    #####: 1076:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1077:	}
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case sea_hag:
    #####: 1084:      for (i = 0; i < state->numPlayers; i++){
    #####: 1085:	if (i != currentPlayer){
    #####: 1086:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1087:	  state->discardCount[i]++;
    #####: 1088:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1089:	}
        -: 1090:      }
    #####: 1091:      return 0;
        -: 1092:		
        -: 1093:    case treasure_map:
        -: 1094:      //search hand for another treasure_map
    #####: 1095:      index = -1;
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	{
    #####: 1098:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1099:	    {
    #####: 1100:	      index = i;
    #####: 1101:	      break;
        -: 1102:	    }
        -: 1103:	}
    #####: 1104:      if (index > -1)
        -: 1105:	{
        -: 1106:	  //trash both treasure cards
    #####: 1107:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1108:	  discardCard(index, currentPlayer, state, 1);
        -: 1109:
        -: 1110:	  //gain 4 Gold cards
    #####: 1111:	  for (i = 0; i < 4; i++)
        -: 1112:	    {
    #####: 1113:	      gainCard(gold, state, 1, currentPlayer);
        -: 1114:	    }
        -: 1115:				
        -: 1116:	  //return success
    #####: 1117:	  return 1;
        -: 1118:	}
        -: 1119:			
        -: 1120:      //no second treasure_map found in hand
    #####: 1121:      return -1;
        -: 1122:    }
        -: 1123:	
    #####: 1124:  return -1;
        -: 1125:}
        -: 1126:
      208: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1128:{
        -: 1129:	
        -: 1130:  //if card is not trashed, added to Played pile 
      208: 1131:  if (trashFlag < 1)
        -: 1132:    {
        -: 1133:      //add card to played pile
      206: 1134:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      206: 1135:      state->playedCardCount++;
        -: 1136:    }
        -: 1137:	
        -: 1138:  //set played card to -1
      208: 1139:  state->hand[currentPlayer][handPos] = -1;
        -: 1140:	
        -: 1141:  //remove card from player's hand
      208: 1142:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
       11: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
      197: 1147:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
    #####: 1150:      state->handCount[currentPlayer]--;
        -: 1151:    }
        -: 1152:  else 	
        -: 1153:    {
        -: 1154:      //replace discarded card with last card in hand
      197: 1155:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:      //set last card to -1
      197: 1157:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:      //reduce number of cards in hand
      197: 1159:      state->handCount[currentPlayer]--;
        -: 1160:    }
        -: 1161:	
      208: 1162:  return 0;
        -: 1163:}
        -: 1164:
     2704: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1166:{
        -: 1167:  //Note: supplyPos is enum of choosen card
        -: 1168:	
        -: 1169:  //check if supply pile is empty (0) or card is not used in game (-1)
     2704: 1170:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1171:    {
        4: 1172:      return -1;
        -: 1173:    }
        -: 1174:	
        -: 1175:  //added card for [whoseTurn] current player:
        -: 1176:  // toFlag = 0 : add to discard
        -: 1177:  // toFlag = 1 : add to deck
        -: 1178:  // toFlag = 2 : add to hand
        -: 1179:
     2700: 1180:  if (toFlag == 1)
        -: 1181:    {
     2700: 1182:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     2700: 1183:      state->deckCount[player]++;
        -: 1184:    }
    #####: 1185:  else if (toFlag == 2)
        -: 1186:    {
    #####: 1187:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1188:      state->handCount[player]++;
        -: 1189:    }
        -: 1190:  else
        -: 1191:    {
    #####: 1192:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1193:      state->discardCount[player]++;
        -: 1194:    }
        -: 1195:	
        -: 1196:  //decrease number in supply pile
     2700: 1197:  state->supplyCount[supplyPos]--;
        -: 1198:	 
     2700: 1199:  return 0;
        -: 1200:}
        -: 1201:
      320: 1202:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1203:{
        -: 1204:  int i;
        -: 1205:	
        -: 1206:  //reset coin count
      320: 1207:  state->coins = 0;
        -: 1208:
        -: 1209:  //add coins for each Treasure card in player's hand
     1900: 1210:  for (i = 0; i < state->handCount[player]; i++)
        -: 1211:    {
     1580: 1212:      if (state->hand[player][i] == copper)
        -: 1213:	{
     1249: 1214:	  state->coins += 1;
        -: 1215:	}
      331: 1216:      else if (state->hand[player][i] == silver)
        -: 1217:	{
    #####: 1218:	  state->coins += 2;
        -: 1219:	}
      331: 1220:      else if (state->hand[player][i] == gold)
        -: 1221:	{
    #####: 1222:	  state->coins += 3;
        -: 1223:	}	
        -: 1224:    }	
        -: 1225:
        -: 1226:  //add bonus
      320: 1227:  state->coins += bonus;
        -: 1228:
      320: 1229:  return 0;
        -: 1230:}
        -: 1231:
      102: 1232:void adventurerCardEffect(int drawntreasure, int temphand[], int z, int currentPlayer, struct gameState *state){
      856: 1233:  while(drawntreasure<2){
      652: 1234:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1235:      shuffle(currentPlayer, state);
        -: 1236:    }
      652: 1237:    drawCard(currentPlayer, state);
      652: 1238:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      652: 1239:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      204: 1240:      drawntreasure++;
        -: 1241:    else{
      448: 1242:      temphand[z]=cardDrawn;
      448: 1243:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      448: 1244:      z++;
        -: 1245:    }
        -: 1246:  }
      652: 1247:  while(z-1>=0){
      448: 1248:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      448: 1249:    z=z-1;
        -: 1250:  }
      102: 1251:}
        -: 1252:
    #####: 1253:void feastCardEffect(int choice1, int temphand[], int currentPlayer, struct gameState *state, int handPos){
        -: 1254:  int i;
    #####: 1255:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1256:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1257:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1258:  }
        -: 1259:  //Backup hand
        -: 1260:  
        -: 1261:  //Update Coins for Buy
    #####: 1262:  updateCoins(currentPlayer, state, 5);
    #####: 1263:  int x = 1;//Condition to loop on
    #####: 1264:  while( x == 1) {//Buy one card
    #####: 1265:    if (supplyCount(choice1, state) <= 0){
        -: 1266:      if (DEBUG)
        -: 1267:        printf("None of that card left, sorry!\n");
        -: 1268:
        -: 1269:      if (DEBUG)
        -: 1270:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1271:    }
    #####: 1272:    else if (state->coins < getCost(choice1)){
    #####: 1273:      printf("That card is too expensive!\n");
        -: 1274:
        -: 1275:      if (DEBUG){
        -: 1276:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1277:      }
        -: 1278:    }
        -: 1279:    else{
        -: 1280:
        -: 1281:      if (DEBUG){
        -: 1282:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1283:      }
        -: 1284:
    #####: 1285:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1286:      x = 0;//No more buying cards
        -: 1287:
        -: 1288:      if (DEBUG){
        -: 1289:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1290:      }
        -: 1291:
        -: 1292:    }
        -: 1293:  }     
        -: 1294:
        -: 1295:  //Reset Hand
    #####: 1296:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1297:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1298:    temphand[i] = -1;
        -: 1299:  }
    #####: 1300:} 
        -: 1301:
        -: 1302:
        2: 1303:void council_roomCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1304:  int i;
        -: 1305:  //+4 Cards
       10: 1306:  for (i = 0; i < 4; i++){
        8: 1307:    drawCard(currentPlayer, state);
        -: 1308:  }
        -: 1309:      
        -: 1310:  //+1 Buy
        2: 1311:  state->numBuys++;
        -: 1312:      
        -: 1313:  //Each other player draws a card
       10: 1314:  for (i = 0; i < state->numPlayers; i++){
        8: 1315:    if ( i != currentPlayer )
        -: 1316:    {
        6: 1317:      drawCard(i, state);
        -: 1318:    }
        -: 1319:  }
        -: 1320:      
        -: 1321:  //put played card in played card pile
        2: 1322:  discardCard(handPos, currentPlayer, state, 0);
        2: 1323:}
        -: 1324:
      102: 1325:void smithyCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1326:  int i;
      408: 1327:  for (i = 0; i < 3; i++)
        -: 1328:  {
      306: 1329:    drawCard(currentPlayer, state);
        -: 1330:  }
        -: 1331:      
        -: 1332:  //discard card from hand
      102: 1333:  discardCard(handPos, currentPlayer, state, 0);
      102: 1334:}
        -: 1335:
      102: 1336:void villageCardEffect(int currentPlayer, struct gameState *state, int handPos){
        -: 1337:  //+1 Card
      102: 1338:  drawCard(currentPlayer, state);
        -: 1339:      
        -: 1340:  //+2 Actions
      102: 1341:  state->numActions = state->numActions + 2;
        -: 1342:      
        -: 1343:  //discard played card from hand
      102: 1344:  discardCard(handPos, currentPlayer, state, 0);
      102: 1345:}
        -: 1346:
        -: 1347://end of dominion.c
        -: 1348:
