        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <assert.h>
        -:    3:#include <stdio.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <time.h>
        -:    6:
function check called 300 returned 100% blocks executed 100%
      300:    7:int check(int a, int b) {
      300:    8:    printf("Comparing %d to %d... ", a, b);
call    0 returned 300
      300:    9:    if (a == b) {
branch  0 taken 268 (fallthrough)
branch  1 taken 32
      268:   10:        printf("TEST PASSED\n");
call    0 returned 268
      268:   11:        return 1;
        -:   12:    } else {
       32:   13:        printf("TEST FAILED\n");
call    0 returned 32
       32:   14:        return 0;
        -:   15:    }
        -:   16:}
        -:   17:
function rng called 1100 returned 100% blocks executed 100%
     1100:   18:int rng(int min, int max) {
     1100:   19:    return rand() % (max + 1 - min) + min;
call    0 returned 1100
        -:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 100%
        1:   22:int main() {
        1:   23:    srand(time(NULL));
call    0 returned 1
call    1 returned 1
        -:   24:    int i;
        1:   25:    printf("Testing Village:\n");
call    0 returned 1
      101:   26:    for (i = 0; i < 100; i++) {
branch  0 taken 100
branch  1 taken 1 (fallthrough)
      100:   27:        struct gameState* state = newGame();
call    0 returned 100
      100:   28:        int* cards = kingdomCards(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
call    0 returned 100
      100:   29:        initializeGame(4, cards, rng(100, 12349), state);
call    0 returned 100
call    1 returned 100
        -:   30:
      100:   31:        gainCard(rng(1, 10), state, 1, 0);
call    0 returned 100
call    1 returned 100
      100:   32:        gainCard(rng(1, 10), state, 1, 0);
call    0 returned 100
call    1 returned 100
      100:   33:        gainCard(rng(1, 10), state, 1, 0);
call    0 returned 100
call    1 returned 100
      100:   34:        gainCard(rng(1, 10), state, 1, 0);
call    0 returned 100
call    1 returned 100
      100:   35:        gainCard(rng(1, 10), state, 1, 0);
call    0 returned 100
call    1 returned 100
      100:   36:        gainCard(rng(1, 10), state, 1, 0);
call    0 returned 100
call    1 returned 100
      100:   37:        gainCard(rng(1, 10), state, 1, 0);
call    0 returned 100
call    1 returned 100
      100:   38:        gainCard(rng(1, 10), state, 1, 0);
call    0 returned 100
call    1 returned 100
      100:   39:        gainCard(rng(1, 10), state, 1, 0);
call    0 returned 100
call    1 returned 100
        -:   40:
      100:   41:        printf("Testing village:\n");
call    0 returned 100
      100:   42:        cardEffect(village, 0, 0, 0, state, rng(0, state->handCount[0]), 0);
call    0 returned 100
call    1 returned 100
      100:   43:        printf("1 card drawn? ");
call    0 returned 100
      100:   44:        check(state->handCount[0], 5);
call    0 returned 100
      100:   45:        printf("Which card was drawn? ");
call    0 returned 100
      100:   46:        check(state->hand[0][4], 4);
call    0 returned 100
      100:   47:        printf("Actions increased by 2? ");
call    0 returned 100
      100:   48:        check(state->numActions, 3);
call    0 returned 100
        -:   49:    }
        -:   50:    
        1:   51:    return 0;
        -:   52:}
